{"version":3,"file":"material.umd.min.js","sources":["../../src/material/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/material/tabs/tabs-module.ts","../../src/material/toolbar/toolbar.ts","../../src/material/toolbar/toolbar-module.ts","../../src/material/tree/node.ts","../../src/material/tree/padding.ts","../../src/material/tree/outlet.ts","../../src/material/tree/tree.ts","../../src/material/tree/toggle.ts","../../src/material/tree/tree-module.ts","../../src/material/tree/data-source/flat-data-source.ts","../../src/material/tree/data-source/nested-data-source.ts","../../src/material/autocomplete/autocomplete-trigger.ts","../../src/material/core/month-constants.ts","../../src/material/datepicker/multi-year-view.ts","../../src/material/expansion/expansion-animations.ts","../../src/material/select/select.ts","../../src/material/tooltip/tooltip.ts","../../src/material/table/table-data-source.ts","../../src/material/tabs/ink-bar.ts","../../src/material/tabs/tab-content.ts","../../src/material/tabs/tab-label.ts","../../src/material/tabs/tab.ts","../../src/material/tabs/tabs-animations.ts","../../src/material/tabs/tab-body.ts","../../src/material/tabs/tab-label-wrapper.ts","../../src/material/tabs/paginated-tab-header.ts","../../src/material/tabs/tab-header.ts","../../src/material/tabs/tab-group.ts","../../src/material/sort/sort-header.ts","../../src/material/sort/sort-module.ts","../../src/material/stepper/step-label.ts","../../src/material/stepper/stepper-intl.ts","../../src/material/stepper/step-header.ts","../../src/material/stepper/stepper-animations.ts","../../src/material/stepper/stepper-icon.ts","../../src/material/stepper/stepper.ts","../../src/material/stepper/stepper-button.ts","../../src/material/stepper/stepper-module.ts","../../src/material/table/table.ts","../../src/material/table/cell.ts","../../src/material/table/row.ts","../../src/material/table/text-column.ts","../../src/material/table/table-module.ts","../../src/material/slider/slider.ts","../../src/material/slider/slider-module.ts","../../src/material/snack-bar/snack-bar-ref.ts","../../src/material/snack-bar/snack-bar-config.ts","../../src/material/snack-bar/simple-snack-bar.ts","../../src/material/snack-bar/snack-bar-animations.ts","../../src/material/snack-bar/snack-bar-container.ts","../../src/material/snack-bar/snack-bar-module.ts","../../src/material/snack-bar/snack-bar.ts","../../src/material/sort/sort.ts","../../src/material/sort/sort-animations.ts","../../src/material/sort/sort-header-intl.ts","../../src/material/sidenav/drawer.ts","../../src/material/sidenav/sidenav.ts","../../src/material/sidenav/sidenav-module.ts","../../src/material/slide-toggle/slide-toggle-config.ts","../../src/material/slide-toggle/slide-toggle.ts","../../src/material/slide-toggle/slide-toggle-required-validator.ts","../../src/material/slide-toggle/slide-toggle-module.ts","../../src/material/progress-spinner/progress-spinner.ts","../../src/material/progress-spinner/progress-spinner-module.ts","../../src/material/radio/radio.ts","../../src/material/radio/radio-module.ts","../../src/material/sidenav/drawer-animations.ts","../../src/material/select/select-module.ts","../../src/material/tooltip/tooltip-animations.ts","../../src/material/tooltip/tooltip-module.ts","../../src/material/paginator/paginator-intl.ts","../../src/material/paginator/paginator.ts","../../src/material/paginator/paginator-module.ts","../../src/material/progress-bar/progress-bar.ts","../../src/material/progress-bar/progress-bar-module.ts","../../src/material/menu/menu.ts","../../src/material/menu/menu-trigger.ts","../../src/material/menu/menu-module.ts","../../src/material/select/select-animations.ts","../../src/material/list/selection-list.ts","../../src/material/list/list-module.ts","../../src/material/menu/menu-animations.ts","../../src/material/menu/menu-content.ts","../../src/material/menu/menu-panel.ts","../../src/material/menu/menu-item.ts","../../src/material/list/list.ts","../../src/material/expansion/expansion-panel-header.ts","../../src/material/expansion/accordion.ts","../../src/material/expansion/expansion-module.ts","../../src/material/grid-list/grid-list-base.ts","../../src/material/grid-list/grid-tile.ts","../../src/material/grid-list/tile-coordinator.ts","../../src/material/grid-list/tile-styler.ts","../../src/material/grid-list/grid-list.ts","../../src/material/grid-list/grid-list-module.ts","../../src/material/icon/icon-registry.ts","../../src/material/icon/icon.ts","../../src/material/icon/icon-module.ts","../../src/material/datepicker/calendar.ts","../../src/material/datepicker/datepicker-animations.ts","../../src/material/datepicker/datepicker.ts","../../src/material/datepicker/datepicker-input.ts","../../src/material/datepicker/datepicker-toggle.ts","../../src/material/datepicker/datepicker-module.ts","../../src/material/divider/divider.ts","../../src/material/divider/divider-module.ts","../../src/material/expansion/accordion-base.ts","../../src/material/expansion/expansion-panel-content.ts","../../src/material/expansion/expansion-panel.ts","../../src/material/input/input.ts","../../src/material/input/input-module.ts","../../src/material/datepicker/datepicker-intl.ts","../../src/material/datepicker/calendar-body.ts","../../src/material/datepicker/month-view.ts","../../src/material/datepicker/year-view.ts","../../src/material/chips/chip-list.ts","../../src/material/chips/chip-input.ts","../../src/material/chips/chips-module.ts","../../src/material/dialog/dialog-config.ts","../../src/material/dialog/dialog-animations.ts","../../src/material/dialog/dialog-container.ts","../../src/material/dialog/dialog-ref.ts","../../src/material/dialog/dialog.ts","../../src/material/dialog/dialog-content-directives.ts","../../src/material/dialog/dialog-module.ts","../../src/material/input/autosize.ts","../../src/material/input/input-value-accessor.ts","../../src/material/card/card.ts","../../src/material/card/card-module.ts","../../src/material/checkbox/checkbox-config.ts","../../src/material/checkbox/checkbox.ts","../../src/material/checkbox/checkbox-required-validator.ts","../../src/material/checkbox/checkbox-module.ts","../../src/material/chips/chip.ts","../../src/material/chips/chip-default-options.ts","../../src/material/button/button.ts","../../src/material/button/button-module.ts","../../src/material/button-toggle/button-toggle.ts","../../src/material/button-toggle/button-toggle-module.ts","../../src/material/form-field/form-field.ts","../../src/material/form-field/form-field-module.ts","../../src/material/autocomplete/autocomplete.ts","../../src/material/autocomplete/autocomplete-origin.ts","../../src/material/autocomplete/autocomplete-module.ts","../../src/material/badge/badge.ts","../../src/material/badge/badge-module.ts","../../src/material/bottom-sheet/bottom-sheet-config.ts","../../src/material/bottom-sheet/bottom-sheet-animations.ts","../../src/material/bottom-sheet/bottom-sheet-container.ts","../../src/material/bottom-sheet/bottom-sheet-module.ts","../../src/material/bottom-sheet/bottom-sheet-ref.ts","../../src/material/bottom-sheet/bottom-sheet.ts","../../src/material/core/option/option.ts","../../src/material/core/option/index.ts","../../src/material/core/label/label-options.ts","../../src/material/form-field/error.ts","../../src/material/form-field/form-field-animations.ts","../../src/material/form-field/form-field-control.ts","../../src/material/form-field/hint.ts","../../src/material/form-field/label.ts","../../src/material/form-field/placeholder.ts","../../src/material/form-field/prefix.ts","../../src/material/form-field/suffix.ts","../../node_modules/tslib/tslib.es6.js","../../src/material/core/common-behaviors/common-module.ts","../../src/material/core/common-behaviors/disabled.ts","../../src/material/core/common-behaviors/color.ts","../../src/material/core/common-behaviors/disable-ripple.ts","../../src/material/core/common-behaviors/tabindex.ts","../../src/material/core/common-behaviors/error-state.ts","../../src/material/core/common-behaviors/initialized.ts","../../src/material/core/datetime/date-adapter.ts","../../src/material/core/datetime/native-date-adapter.ts","../../src/material/core/line/line.ts","../../src/material/core/ripple/ripple-renderer.ts","../../src/material/form-field/form-field-errors.ts","../../src/material/input/input-errors.ts","../../src/material/datepicker/datepicker-errors.ts","../../src/material/menu/menu-errors.ts","../../src/material/select/select-errors.ts","../../src/material/sort/sort-errors.ts","../../src/material/core/version.ts","../../src/material/core/animation/animation.ts","../../src/material/core/datetime/date-formats.ts","../../src/material/core/datetime/native-date-formats.ts","../../src/material/core/datetime/index.ts","../../src/material/core/error/error-options.ts","../../src/material/core/gestures/gesture-config.ts","../../src/material/core/ripple/ripple-ref.ts","../../src/material/core/ripple/ripple.ts","../../src/material/core/ripple/index.ts","../../src/material/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/material/core/selection/index.ts","../../src/material/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HasTabIndex, HasTabIndexCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {FocusMonitor, FocusableOption} from '@angular/cdk/a11y';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MatInkBar} from '../ink-bar';\nimport {MatPaginatedTabHeader} from '../paginated-tab-header';\n\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {\n    'class': 'mat-tab-nav-bar mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n    '[class.mat-primary]': 'color !== \"warn\" && color !== \"accent\"',\n    '[class.mat-accent]': 'color === \"accent\"',\n    '[class.mat-warn]': 'color === \"warn\"',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends MatPaginatedTabHeader implements AfterContentChecked,\n  AfterContentInit, OnDestroy {\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true}) _items: QueryList<MatTabLink>;\n  @ViewChild(MatInkBar, {static: true}) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer', {static: true}) _tabListContainer: ElementRef;\n  @ViewChild('tabList', {static: true}) _tabList: ElementRef;\n  @ViewChild('nextPaginator', {static: false}) _nextPaginator: ElementRef<HTMLElement>;\n  @ViewChild('previousPaginator', {static: false}) _previousPaginator: ElementRef<HTMLElement>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const classList = this._elementRef.nativeElement.classList;\n    classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Whether the ripple effect is disabled or not. */\n  @Input()\n  get disableRipple() { return this._disableRipple; }\n  set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n  private _disableRipple: boolean = false;\n\n  /** Theme color of the nav bar. */\n  @Input() color: ThemePalette = 'primary';\n\n  constructor(elementRef: ElementRef,\n              @Optional() dir: Directionality,\n              ngZone: NgZone,\n              changeDetectorRef: ChangeDetectorRef,\n              viewportRuler: ViewportRuler,\n              /**\n               * @deprecated @breaking-change 9.0.0 `platform` parameter to become required.\n               */\n              @Optional() platform?: Platform,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, changeDetectorRef, viewportRuler, dir, ngZone, platform, animationMode);\n  }\n\n  protected _itemSelected() {\n    // noop\n  }\n\n  ngAfterContentInit() {\n    this.updateActiveLink();\n    super.ngAfterContentInit();\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @breaking-change 8.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(_element?: ElementRef) {\n    if (!this._items) {\n      return;\n    }\n\n    const items = this._items.toArray();\n\n    for (let i = 0; i < items.length; i++) {\n      if (items[i].active) {\n        this.selectedIndex = i;\n        this._changeDetectorRef.markForCheck();\n        return;\n      }\n    }\n\n    // The ink bar should hide itself if no items are active.\n    this.selectedIndex = -1;\n    this._inkBar.hide();\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nclass MatTabLinkBase {}\nconst _MatTabLinkMixinBase:\n    HasTabIndexCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatTabLinkBase =\n        mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active ? \"page\" : null',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase implements OnDestroy, CanDisable,\n  CanDisableRipple, HasTabIndex, RippleTarget, FocusableOption {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this.elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down. The ripple config\n   * is set to the global ripple options since we don't have any configurable options for\n   * the tab link ripples.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig & RippleGlobalOptions;\n\n  /**\n   * Whether ripples are disabled on interaction.\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      !!this.rippleConfig.disabled;\n  }\n\n  constructor(\n      private _tabNavBar: MatTabNav, public elementRef: ElementRef, ngZone: NgZone,\n      platform: Platform,\n      @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalRippleOptions: RippleGlobalOptions|null,\n      @Attribute('tabindex') tabIndex: string, private _focusMonitor: FocusMonitor,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(elementRef.nativeElement);\n    this.rippleConfig = globalRippleOptions || {};\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (animationMode === 'NoopAnimations') {\n      this.rippleConfig.animation = {enterDuration: 0, exitDuration: 0};\n    }\n\n    _focusMonitor.monitor(elementRef);\n  }\n\n  focus() {\n    this.elementRef.nativeElement.focus();\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n    this._focusMonitor.stopMonitoring(this.elementRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Inject,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nclass MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatToolbarMixinBase: CanColorCtor & typeof MatToolbarBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = Array.from<HTMLElement>(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => !!(node.textContent && node.textContent.trim()));\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  CDK_TREE_NODE_OUTLET_NODE,\n  CdkNestedTreeNode,\n  CdkTree,\n  CdkTreeNode,\n  CdkTreeNodeDef,\n} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\nconst _MatTreeNodeMixinBase: HasTabIndexCtor & CanDisableCtor & typeof CdkTreeNode =\n    mixinTabIndex(mixinDisabled(CdkTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends CdkNestedTreeNode<T> implements AfterContentInit,\n  OnDestroy {\n  @Input('matNestedTreeNode') node: T;\n\n  /** Whether the node is disabled. */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled = false;\n\n  /** Tabindex for the node. */\n  @Input()\n  get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n  set tabIndex(value: number) {\n    // If the specified tabIndex value is null or undefined, fall back to the default value.\n    this._tabIndex = value != null ? value : 0;\n  }\n  private _tabIndex: number;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  Inject,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]',\n  providers: [{\n    provide: CdkTreeNodeOutlet,\n    useExisting: MatTreeNodeOutlet\n  }]\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(\n      public viewContainer: ViewContainerRef,\n      @Inject(CDK_TREE_NODE_OUTLET_NODE) @Optional() public _node?: any) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTree} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  // See note on CdkTree for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet, {static: true}) _nodeOutlet: MatTreeNodeOutlet;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) =>\n                  Observable<T[]> | T[] | undefined | null) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (childrenNodes) {\n        if (Array.isArray(childrenNodes)) {\n          this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n        } else {\n          childrenNodes.pipe(take(1)).subscribe(children => {\n            this._flattenChildren(children, level, resultNodes, parentMap);\n          });\n        }\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this._treeFlattener.flattenNodes(this.data));\n    this._treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private _treeControl: FlatTreeControl<F>,\n              private _treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this._treeControl.expansionModel.onChange,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this._treeFlattener.expandFlattenedNodes(this._flattenedData.value, this._treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n  ConnectedPosition,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n    '[attr.aria-haspopup]': '!autocompleteDisabled',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnChanges, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /**\n   * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n   * closed autocomplete from being reopened if the user switches to another browser tab and then\n   * comes back.\n   */\n  private _canOpenOnNextFocus = true;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /**\n   * Event handler for when the window is blurred. Needs to be an\n   * arrow function in order to preserve the context.\n   */\n  private _windowBlurHandler = () => {\n    // If the user blurred the window while the autocomplete is focused, it means that it'll be\n    // refocused when they come back. In this case we want to skip the first focus event, if the\n    // pane was closed, in order to avoid reopening it unintentionally.\n    this._canOpenOnNextFocus =\n        this._document.activeElement !== this._element.nativeElement || this.panelOpen;\n  }\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n   * will render the panel underneath the trigger if there is enough space for it to fit in\n   * the viewport, otherwise the panel will be shown above it. If the position is set to\n   * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n   * whether it fits completely in the viewport.\n   */\n  @Input('matAutocompletePosition') position: 'auto' | 'above' | 'below' = 'auto';\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef<HTMLInputElement>, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {\n\n    if (typeof window !== 'undefined') {\n      _zone.runOutsideAngular(() => {\n        window.addEventListener('blur', this._windowBlurHandler);\n      });\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['position'] && this._positionStrategy) {\n      this._setStrategyPositions(this._positionStrategy);\n\n      if (this.panelOpen) {\n        this._overlayRef!.updatePosition();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('blur', this._windowBlurHandler);\n    }\n\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   */\n  updatePosition(): void {\n    if (this._overlayAttached) {\n      this._overlayRef!.updatePosition();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._getOutsideClickStream(),\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  }) as Observable<MatOptionSelectionChange>;\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private _getOutsideClickStream(): Observable<any> {\n    return merge(\n      fromEvent(this._document, 'click') as Observable<MouseEvent>,\n      fromEvent(this._document, 'touchend') as Observable<TouchEvent>\n    )\n    .pipe(filter(event => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen() && this._document.activeElement === event.target) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._canOpenOnNextFocus) {\n      this._canOpenOnNextFocus = true;\n    } else if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n        .pipe(\n            // create a new stream of panelClosingActions, replacing any previous streams\n            // that were created, and flatten it so our stream only emits closing events...\n            switchMap(() => {\n              const wasOpen = this.panelOpen;\n              this._resetActiveItem();\n              this.autocomplete._setVisibility();\n\n              if (this.panelOpen) {\n                this._overlayRef!.updatePosition();\n\n                // If the `panelOpen` state changed, we need to make sure to emit the `opened`\n                // event, because we may not have emitted it when the panel was attached. This\n                // can happen if the users opens the panel and there are no options, but the\n                // options come in slightly later or as a result of the value changing.\n                if (wasOpen !== this.panelOpen) {\n                  this.autocomplete.opened.emit();\n                }\n              }\n\n              return this.panelClosingActions;\n            }),\n            // when the first closing event occurs...\n            take(1))\n        // set the value, close the panel, and complete.\n        .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n\n    this._previousValue = inputValue;\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    let overlayRef = this._overlayRef;\n\n    if (!overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      overlayRef = this._overlay.create(this._getOverlayConfig());\n      this._overlayRef = overlayRef;\n\n      // Use the `keydownEvents` in order to take advantage of\n      // the overlay event targeting provided by the CDK overlay.\n      overlayRef.keydownEvents().subscribe(event => {\n        // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n        // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n        if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n          this._resetActiveItem();\n          this._closeKeyEventStream.next();\n\n          // We need to stop propagation, otherwise the event will eventually\n          // reach the input itself and cause the overlay to be reopened.\n          event.stopPropagation();\n          event.preventDefault();\n        }\n      });\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && overlayRef) {\n            overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      // Update the trigger, panel width and direction, in case anything has changed.\n      this._positionStrategy.setOrigin(this._getConnectedElement());\n      overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (overlayRef && !overlayRef.hasAttached()) {\n      overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false);\n\n    this._setStrategyPositions(strategy);\n    this._positionStrategy = strategy;\n    return strategy;\n  }\n\n  /** Sets the positions on a position strategy based on the directive's input state. */\n  private _setStrategyPositions(positionStrategy: FlexibleConnectedPositionStrategy) {\n    const belowPosition: ConnectedPosition = {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'top'\n    };\n    const abovePosition: ConnectedPosition = {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'bottom',\n\n      // The overlay edge connected to the trigger should have squared corners, while\n      // the opposite end has rounded corners. We apply a CSS class to swap the\n      // border-radius based on the overlay position.\n      panelClass: 'mat-autocomplete-panel-above'\n    };\n\n    let positions: ConnectedPosition[];\n\n    if (this.position === 'above') {\n      positions = [abovePosition];\n    } else if (this.position === 'below') {\n      positions = [belowPosition];\n    } else {\n      positions = [belowPosition, abovePosition];\n    }\n\n    positionStrategy.withPositions(positions);\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n * @docs-private\n * @breaking-change 8.0.0 Remove this with V8 since it was only targeted for testing.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n  OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n\n    if (!isSameMultiYearView(\n      this._dateAdapter, oldActiveDate, this._activeDate, this.minDate, this.maxDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody, {static: false}) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n\n    // We want a range years such that we maximize the number of\n    // enabled dates visible at once. This prevents issues where the minimum year\n    // is the last item of a page OR the maximum year is the first item of a page.\n\n    // The offset from the active year to the \"slot\" for the starting year is the\n    // *actual* first rendered year in the multi-year view.\n    const activeYear = this._dateAdapter.getYear(this._activeDate);\n    const minYearOfPage = activeYear - getActiveOffset(\n      this._dateAdapter, this.activeDate, this.minDate, this.maxDate);\n\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(minYearOfPage + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n          -getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n          yearsPerPage - getActiveOffset(\n            this._dateAdapter, this.activeDate, this.minDate, this.maxDate) - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n      case SPACE:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate);\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n\nexport function isSameMultiYearView<D>(\n  dateAdapter: DateAdapter<D>, date1: D, date2: D, minDate: D | null, maxDate: D | null): boolean {\n  const year1 = dateAdapter.getYear(date1);\n  const year2 = dateAdapter.getYear(date2);\n  const startingYear = getStartingYear(dateAdapter, minDate, maxDate);\n  return Math.floor((year1 - startingYear) / yearsPerPage) ===\n          Math.floor((year2 - startingYear) / yearsPerPage);\n}\n\n/**\n * When the multi-year view is first opened, the active year will be in view.\n * So we compute how many years are between the active year and the *slot* where our\n * \"startingYear\" will render when paged into view.\n */\nexport function getActiveOffset<D>(\n  dateAdapter: DateAdapter<D>, activeDate: D, minDate: D | null, maxDate: D | null): number {\n  const activeYear = dateAdapter.getYear(activeDate);\n  return euclideanModulo((activeYear - getStartingYear(dateAdapter, minDate, maxDate)),\n    yearsPerPage);\n}\n\n/**\n * We pick a \"starting\" year such that either the maximum year would be at the end\n * or the minimum year would be at the beginning of a page.\n */\nfunction getStartingYear<D>(\n  dateAdapter: DateAdapter<D>, minDate: D | null, maxDate: D | null): number {\n  let startingYear = 0;\n  if (maxDate) {\n    const maxYear = dateAdapter.getYear(maxDate);\n    startingYear = maxYear - yearsPerPage + 1;\n  } else if (minDate) {\n    startingYear = dateAdapter.getYear(minDate);\n  }\n  return startingYear;\n}\n\n/** Gets remainder that is non-negative, even if first number is negative */\nfunction euclideanModulo (a: number, b: number): number {\n  return (a % b + b) % b;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed, void', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed, void', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed, void => collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed, void', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager, LiveAnnouncer} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  A,\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {CdkConnectedOverlay, Overlay, ScrollStrategy} from '@angular/cdk/overlay';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nexport let SELECT_MULTIPLE_PANEL_PADDING_X = 0;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nclass MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nconst _MatSelectMixinBase:\n    CanDisableCtor &\n    HasTabIndexCtor &\n    CanDisableRippleCtor &\n    CanUpdateErrorStateCtor &\n    typeof MatSelectBase =\n        mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    '[class.mat-select-empty]': 'empty',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanelWrap,\n    matSelectAnimations.transformPanel\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  private _scrollStrategyFactory: () => ScrollStrategy;\n\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy: ScrollStrategy;\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @breaking-change 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger', {static: false}) trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel', {static: false}) panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay, {static: false}) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger, {static: false}) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Function used to sort the values in a select in multiple mode.\n   * Follows the same logic as `Array.prototype.sort`.\n   */\n  @Input() sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    const options = this.options;\n\n    if (options) {\n      return options.changes.pipe(\n        startWith(options),\n        switchMap(() => merge(...options.map(option => option.onSelectionChange)))\n      );\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  }) as Observable<MatOptionSelectionChange>;\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) scrollStrategyFactory: any,\n    /**\n     * @deprecated _liveAnnouncer to be turned into a required parameter.\n     * @breaking-change 8.0.0\n     */\n    private _liveAnnouncer?: LiveAnnouncer) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this._scrollStrategy = this._scrollStrategyFactory();\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n\n    this._viewportRuler.change()\n      .pipe(takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this._panelOpen) {\n          this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes['disabled']) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n                       keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n    const manager = this._keyManager;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if ((isOpenKey && !hasModifierKey(event)) || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      const previouslySelectedOption = this.selected;\n\n      if (keyCode === HOME || keyCode === END) {\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        manager.onKeydown(event);\n      }\n\n      const selectedOption = this.selected;\n\n      // Since the value has changed, we need to announce it ourselves.\n      // @breaking-change 8.0.0 remove null check for _liveAnnouncer.\n      if (this._liveAnnouncer && selectedOption && previouslySelectedOption !== selectedOption) {\n        // We set a duration on the live announcement, because we want the live element to be\n        // cleared after a while so that users can't navigate to it using the arrow keys.\n        this._liveAnnouncer.announce((selectedOption as MatOption).viewValue, 10000);\n      }\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem &&\n      !hasModifierKey(event)) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._setPseudoCheckboxPaddingSize();\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  // TODO(josephperrott): Remove after 2018 spec updates are fully merged.\n  /** Sets the pseudo checkbox padding size based on the width of the pseudo checkbox. */\n  private _setPseudoCheckboxPaddingSize() {\n    if (!SELECT_MULTIPLE_PANEL_PADDING_X && this.multiple) {\n      const pseudoCheckbox = this.panel.nativeElement.querySelector('.mat-pseudo-checkbox');\n      if (pseudoCheckbox) {\n        SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + pseudoCheckbox.offsetWidth;\n      }\n    }\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n      this.stateChanges.next();\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n      .withAllowedModifierKeys(['shiftKey']);\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) :\n                                     options.indexOf(a) - options.indexOf(b);\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(options?: FocusOptions): void {\n    this._elementRef.nativeElement.focus(options);\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number | undefined, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n      this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {HAMMER_LOADER, HammerLoader} from '@angular/platform-browser';\nimport {Observable, Subject} from 'rxjs';\nimport {take, takeUntil} from 'rxjs/operators';\n\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n  position?: TooltipPosition;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy, OnInit {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) scrollStrategy: any,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions,\n    @Optional() @Inject(HAMMER_LOADER) hammerLoader?: HammerLoader) {\n\n    this._scrollStrategy = scrollStrategy;\n    const element: HTMLElement = _elementRef.nativeElement;\n    const hasGestures = typeof window === 'undefined' || (window as any).Hammer || hammerLoader;\n\n    // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n    if (!platform.IOS && !platform.ANDROID) {\n      this._manualListeners\n        .set('mouseenter', () => this.show())\n        .set('mouseleave', () => this.hide());\n    } else if (!hasGestures) {\n      // If Hammerjs isn't loaded, fall back to showing on `touchstart`, otherwise\n      // there's no way for the user to trigger the tooltip on a touch device.\n      this._manualListeners.set('touchstart', () => this.show());\n    }\n\n    this._manualListeners.forEach((listener, event) => element.addEventListener(event, listener));\n\n    _focusMonitor.monitor(_elementRef).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n\n    if (_defaultOptions && _defaultOptions.position) {\n      this.position = _defaultOptions.position;\n    }\n  }\n\n  /**\n   * Setup styling-specific things\n   */\n  ngOnInit() {\n    const element = this._elementRef.nativeElement;\n    const elementStyle = element.style as CSSStyleDeclaration & {webkitUserDrag: string};\n\n    if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS and in Safari, because it will prevent users from typing in inputs.\n      // Since `user-select: none` is not needed for the `longpress` event and can cause unexpected\n      // behavior for text fields, we always clear the `user-select` to avoid such issues.\n      elementStyle.webkitUserSelect = elementStyle.userSelect = elementStyle.msUserSelect = '';\n    }\n\n    // Hammer applies `-webkit-user-drag: none` on all elements by default,\n    // which breaks the native drag&drop. If the consumer explicitly made\n    // the element draggable, clear the `-webkit-user-drag`.\n    if (element.draggable && elementStyle.webkitUserDrag === 'none') {\n      elementStyle.webkitUserDrag = '';\n    }\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    this._manualListeners.forEach((listener, event) => {\n      this._elementRef.nativeElement.removeEventListener(event, listener);\n    });\n    this._manualListeners.clear();\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message || (this._isTooltipVisible() &&\n      !this._tooltipInstance!._showTimeoutId && !this._tooltipInstance!._hideTimeoutId)) {\n        return;\n    }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE && !hasModifierKey(e)) {\n      e.preventDefault();\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    const scrollableAncestors =\n        this._scrollDispatcher.getAncestorScrollContainers(this._elementRef);\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n                         .flexibleConnectedTo(this._elementRef)\n                         .withTransformOriginOn('.mat-tooltip')\n                         .withFlexibleDimensions(false)\n                         .withViewportMargin(8)\n                         .withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent implements OnDestroy {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number | null;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number | null;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n      this._hideTimeoutId = null;\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n      this._showTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n      this._showTimeoutId = null;\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n      this._hideTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  ngOnDestroy() {\n    this._onHide.complete();\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.io/design/components/tooltips.html#behavior\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription,\n  Subject,\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /** Used to react to internal changes of the paginator that are made by the data source itself. */\n  private readonly _internalPageChanges = new Subject<void>();\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value = (data as {[key: string]: any})[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const dataStr = Object.keys(data).reduce((currentTerm: string, key: string) => {\n      // Use an obscure Unicode character to delimit the words in the concatenated string.\n      // This avoids matches where the values of two columns combined will match the user's query\n      // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n      // that has a very low chance of being typed in by somebody in a text field. This one in\n      // particular is \"White up-pointing triangle with dot\" from\n      // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n      return currentTerm + (data as {[key: string]: any})[key] + '◬';\n    }, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null|void> = this._sort ?\n        merge(this._sort.sortChange, this._sort.initialized) as Observable<Sort|void> :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null|void> = this._paginator ?\n        merge(\n          this._paginator.page,\n          this._internalPageChanges,\n          this._paginator.initialized\n        ) as Observable<PageEvent|void> :\n        observableOf(null);\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged slice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice(startIndex, startIndex + this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      const paginator = this.paginator;\n\n      if (!paginator) { return; }\n\n      paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;\n        const newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);\n\n        if (newPageIndex !== paginator.pageIndex) {\n          paginator.pageIndex = newPageIndex;\n\n          // Since the paginator only emits after user-generated changes,\n          // we need our own stream so we know to should re-render the data.\n          this._internalPageChanges.next();\n        }\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone, Optional} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabContent} from './tab-content';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nclass MatTabBase {}\nconst _MatTabMixinBase: CanDisableCtor & typeof MatTabBase =\n    mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel, {static: false}) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef, static: true})\n  _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef, {static: true}) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material tabs.\n * @docs-private\n */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state('left', style({transform: 'translate3d(-100%, 0, 0)', minHeight: '1px'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)', minHeight: '1px'})),\n\n    transition('* => left, * => right, left => center, right => center',\n        animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectorRef,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription, Subject} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith, distinctUntilChanged} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit, OnDestroy {\n\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Tab body position state. Used by the animation trigger for the current state. */\n  _position: MatTabBodyPositionState;\n\n  /** Emits when an animation on the tab is complete. */\n  _translateTabComplete = new Subject<AnimationEvent>();\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective, {static: false}) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\n  @Input() origin: number;\n\n  // Note that the default value will always be overwritten by `MatTabBody`, but we need one\n  // anyway to prevent the animations module from throwing an error if the body is used on its own.\n  /** Duration for the tab's animation. */\n  @Input() animationDuration: string = '500ms';\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    if (_dir) {\n      this._dirChangeSubscription = _dir.change.subscribe((dir: Direction) => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Ensure that we get unique animation events, because the `.done` callback can get\n    // invoked twice in some browsers. See https://github.com/angular/angular/issues/24084.\n    this._translateTabComplete.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      // If the transition to the center is complete, emit an event.\n      if (this._isCenterPosition(event.toState) && this._isCenterPosition(this._position)) {\n        this._onCentered.emit();\n      }\n\n      if (this._isCenterPosition(event.fromState) && !this._isCenterPosition(this._position)) {\n        this._afterLeavingCenter.emit();\n      }\n    });\n  }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this.origin != null) {\n      this._position = this._computePositionFromOrigin();\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n    this._translateTabComplete.complete();\n  }\n\n  _onTranslateTabStarted(event: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(event.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n  private _computePositionFromOrigin(): MatTabBodyPositionState {\n    const dir = this._getLayoutDirection();\n\n    if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nclass MatTabLabelWrapperBase {}\nconst _MatTabLabelWrapperMixinBase: CanDisableCtor & typeof MatTabLabelWrapperBase =\n    mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectorRef,\n  ElementRef,\n  NgZone,\n  Optional,\n  QueryList,\n  EventEmitter,\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  OnDestroy,\n} from '@angular/core';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {FocusKeyManager, FocusableOption} from '@angular/cdk/a11y';\nimport {END, ENTER, HOME, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {merge, of as observableOf, Subject, timer, fromEvent} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from './ink-bar';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\n\n\n/** Config used to bind passive event listeners */\nconst passiveEventListenerOptions =\n    normalizePassiveListenerOptions({passive: true}) as EventListenerOptions;\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n/**\n * Amount of milliseconds to wait before starting to scroll the header automatically.\n * Set a little conservatively in order to handle fake events dispatched on touch devices.\n */\nconst HEADER_SCROLL_DELAY = 650;\n\n/**\n * Interval in milliseconds at which to scroll the header\n * while the user is holding their pointer.\n */\nconst HEADER_SCROLL_INTERVAL = 100;\n\n/** Item inside a paginated tab header. */\ntype MatPaginatedTabHeaderItem = FocusableOption & {elementRef: ElementRef};\n\n/**\n * Base class for a tab header that supported pagination.\n */\nexport abstract class MatPaginatedTabHeader implements AfterContentChecked, AfterContentInit,\n  AfterViewInit, OnDestroy {\n  abstract _items: QueryList<MatPaginatedTabHeaderItem>;\n  abstract _inkBar: MatInkBar;\n  abstract _tabListContainer: ElementRef<HTMLElement>;\n  abstract _tabList: ElementRef<HTMLElement>;\n  abstract _nextPaginator: ElementRef<HTMLElement>;\n  abstract _previousPaginator: ElementRef<HTMLElement>;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatPaginatedTabHeaderItem>;\n\n  /** Cached text content of the header. */\n  private _currentTextContent: string;\n\n  /** Stream that will stop the automated scrolling. */\n  private _stopScrolling = new Subject<void>();\n\n  /** The index of the active tab. */\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n\n    if (this._selectedIndex != value) {\n      this._selectedIndexChanged = true;\n      this._selectedIndex = value;\n\n      if (this._keyManager) {\n        this._keyManager.updateActiveItemIndex(value);\n      }\n    }\n  }\n  private _selectedIndex: number = 0;\n\n  /** Event emitted when the option is selected. */\n  readonly selectFocusedIndex: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when a label is focused. */\n  readonly indexFocused: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              /**\n               * @deprecated @breaking-change 9.0.0 `_platform` and `_animationMode`\n               * parameters to become required.\n               */\n              private _platform?: Platform,\n              public _animationMode?: string) {\n\n    // Bind the `mouseleave` event on the outside since it doesn't change anything in the view.\n    _ngZone.runOutsideAngular(() => {\n      fromEvent(_elementRef.nativeElement, 'mouseleave')\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => {\n          this._stopInterval();\n        });\n    });\n  }\n\n  /** Called when the user has selected an item via the keyboard. */\n  protected abstract _itemSelected(event: KeyboardEvent): void;\n\n  ngAfterViewInit() {\n    // We need to handle these events manually, because we want to bind passive event listeners.\n    fromEvent(this._previousPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._handlePaginatorPress('before');\n      });\n\n    fromEvent(this._nextPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._handlePaginatorPress('after');\n      });\n  }\n\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this.updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager<MatPaginatedTabHeaderItem>(this._items)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withWrap();\n\n    this._keyManager.updateActiveItem(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, resize, this._items.changes).pipe(takeUntil(this._destroyed)).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._items.length) {\n      this.updatePagination();\n      this._tabLabelCount = this._items.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._stopScrolling.complete();\n  }\n\n  /** Handles keyboard events on the header. */\n  _handleKeydown(event: KeyboardEvent) {\n    // We don't handle any key bindings with a modifier key.\n    if (hasModifierKey(event)) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        this._itemSelected(event);\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    const textContent = this._elementRef.nativeElement.textContent;\n\n    // We need to diff the text content of the header, because the MutationObserver callback\n    // will fire even if the text content didn't change which is inefficient and is prone\n    // to infinite loops if a poorly constructed expression is passed in (see #14249).\n    if (textContent !== this._currentTextContent) {\n      this._currentTextContent = textContent || '';\n\n      // The content observer runs outside the `NgZone` by default, which\n      // means that we need to bring the callback back in ourselves.\n      this._ngZone.run(() => {\n        this.updatePagination();\n        this._alignInkBarToSelectedTab();\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /**\n   * Updates the view whether pagination should be enabled or not.\n   *\n   * WARNING: Calling this method can be very costly in terms of performance. It should be called\n   * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\n   * page.\n   */\n  updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._items) { return true; }\n\n    const tab = this._items ? this._items.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._items && this._items.length) {\n      this._items.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const platform = this._platform;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/components/issues/10276\n    // We round the `transform` here, because transforms with sub-pixel precision cause some\n    // browsers to blur the content of the element.\n    this._tabList.nativeElement.style.transform = `translateX(${Math.round(translateX)}px)`;\n\n    // Setting the `transform` on IE will change the scroll offset of the parent, causing the\n    // position to be thrown off in some cases. We have to reset it ourselves to ensure that\n    // it doesn't get thrown off. Note that we scope it only to IE and Edge, because messing\n    // with the scroll position throws off Chrome 71+ in RTL mode (see #14689).\n    // @breaking-change 9.0.0 Remove null check for `platform` after it can no longer be undefined.\n    if (platform && (platform.TRIDENT || platform.EDGE)) {\n      this._tabListContainer.nativeElement.scrollLeft = 0;\n    }\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(value: number) {\n    this._scrollTo(value);\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(direction: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    const scrollAmount = (direction == 'before' ? -1 : 1) * viewLength / 3;\n\n    return this._scrollTo(this._scrollDistance + scrollAmount);\n  }\n\n  /** Handles click events on the pagination arrows. */\n  _handlePaginatorClick(direction: ScrollDirection) {\n    this._stopInterval();\n    this._scrollHeader(direction);\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._items ? this._items.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    const {offsetLeft, offsetWidth} = selectedLabel.elementRef.nativeElement;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = offsetLeft;\n      labelAfterPos = labelBeforePos + offsetWidth;\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - offsetLeft;\n      labelBeforePos = labelAfterPos - offsetWidth;\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedItem = this._items && this._items.length ?\n        this._items.toArray()[this.selectedIndex] : null;\n    const selectedLabelWrapper = selectedItem ? selectedItem.elementRef.nativeElement : null;\n\n    if (selectedLabelWrapper) {\n      this._inkBar.alignToElement(selectedLabelWrapper);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n\n  /** Stops the currently-running paginator interval.  */\n  _stopInterval() {\n    this._stopScrolling.next();\n  }\n\n  /**\n   * Handles the user pressing down on one of the paginators.\n   * Starts scrolling the header after a certain amount of time.\n   * @param direction In which direction the paginator should be scrolled.\n   */\n  _handlePaginatorPress(direction: ScrollDirection) {\n    // Avoid overlapping timers.\n    this._stopInterval();\n\n    // Start a timer after the delay and keep firing based on the interval.\n    timer(HEADER_SCROLL_DELAY, HEADER_SCROLL_INTERVAL)\n      // Keep the timer going until something tells it to stop or the component is destroyed.\n      .pipe(takeUntil(merge(this._stopScrolling, this._destroyed)))\n      .subscribe(() => {\n        const {maxScrollDistance, distance} = this._scrollHeader(direction);\n\n        // Stop the timer if we've reached the start or the end.\n        if (distance === 0 || distance >= maxScrollDistance) {\n          this._stopInterval();\n        }\n      });\n  }\n\n  /**\n   * Scrolls the header to a given position.\n   * @param position Position to which to scroll.\n   * @returns Information on the current scroll distance and the maximum.\n   */\n  private _scrollTo(position: number) {\n    const maxScrollDistance = this._getMaxScrollDistance();\n    this._scrollDistance = Math.max(0, Math.min(maxScrollDistance, position));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n\n    return {maxScrollDistance, distance: this._scrollDistance};\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewInit,\n  Input,\n  Inject,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {Platform} from '@angular/cdk/platform';\nimport {MatPaginatedTabHeader} from './paginated-tab-header';\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['selectedIndex'],\n  outputs: ['selectFocusedIndex', 'indexFocused'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends MatPaginatedTabHeader implements AfterContentChecked,\n  AfterContentInit, AfterViewInit, OnDestroy {\n\n  @ContentChildren(MatTabLabelWrapper) _items: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar, {static: true}) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer', {static: true}) _tabListContainer: ElementRef;\n  @ViewChild('tabList', {static: true}) _tabList: ElementRef;\n  @ViewChild('nextPaginator', {static: false}) _nextPaginator: ElementRef<HTMLElement>;\n  @ViewChild('previousPaginator', {static: false}) _previousPaginator: ElementRef<HTMLElement>;\n\n  /** Whether the ripple effect is disabled or not. */\n  @Input()\n  get disableRipple() { return this._disableRipple; }\n  set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n  private _disableRipple: boolean = false;\n\n  constructor(elementRef: ElementRef,\n              changeDetectorRef: ChangeDetectorRef,\n              viewportRuler: ViewportRuler,\n              @Optional() dir: Directionality,\n              ngZone: NgZone,\n              platform: Platform,\n              // @breaking-change 9.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, changeDetectorRef, viewportRuler, dir, ngZone, platform, animationMode);\n  }\n\n  protected _itemSelected(event: KeyboardEvent) {\n    event.preventDefault();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  InjectionToken,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n/** Object that can be used to configure the default options for the tabs module. */\nexport interface MatTabsConfig {\n  /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n  animationDuration?: string;\n}\n\n/** Injection token that can be used to provide the default options the tabs module. */\nexport const MAT_TABS_CONFIG = new InjectionToken<MatTabsConfig>('MAT_TABS_CONFIG');\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nclass MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatTabGroupMixinBase: CanColorCtor & CanDisableRippleCtor & typeof MatTabGroupBase =\n    mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper', {static: false}) _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader', {static: false}) _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Duration for the tab animation. Will be normalized to milliseconds if no units are set. */\n  @Input()\n  get animationDuration(): string { return this._animationDuration; }\n  set animationDuration(value: string) {\n    this._animationDuration = /^\\d+$/.test(value) ? value + 'ms' : value;\n  }\n  private _animationDuration: string;\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_TABS_CONFIG) @Optional() defaultConfig?: MatTabsConfig,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n    this._groupId = nextId++;\n    this.animationDuration = defaultConfig && defaultConfig.animationDuration ?\n        defaultConfig.animationDuration : '500ms';\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n        }\n      });\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges))\n      .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    const wrapper = this._tabBodyWrapper.nativeElement;\n    this._tabBodyWrapperHeight = wrapper.clientHeight;\n    wrapper.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, index: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = index;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nclass MatSortHeaderBase {}\nconst _MatSortHeaderMixinBase: CanDisableCtor & typeof MatSortHeaderBase =\n    mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/** Column definition associated with a `MatSortHeader`. */\ninterface MatSortHeaderColumnDef {\n  name: string;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Inject('MAT_SORT_HEADER_COLUMN_DEF') @Optional()\n                  public _columnDef: MatSortHeaderColumnDef) {\n    // Note that we use a string token for the `_columnDef`, because the value is provided both by\n    // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n    // and we want to avoid having the sort header depending on the CDK table because\n    // of this single reference.\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._columnDef) {\n      this.id = this._columnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n\n  /** Whether the arrow inside the sort header should be rendered. */\n  _renderArrow() {\n    return !this._isDisabled() || this._isSorted();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n\n\n/** @docs-private */\nexport function MAT_STEPPER_INTL_PROVIDER_FACTORY(parentIntl: MatStepperIntl) {\n  return parentIntl || new MatStepperIntl();\n}\n\n/** @docs-private */\nexport const MAT_STEPPER_INTL_PROVIDER = {\n  provide: MatStepperIntl,\n  deps: [[new Optional(), new SkipSelf(), MatStepperIntl]],\n  useFactory: MAT_STEPPER_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\nimport {CdkStepHeader, StepState} from '@angular/cdk/stepper';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader extends CdkStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: StepState;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Error message to display when there's an error. */\n  @Input() errorMessage: string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  /** Whether the ripple should be disabled. */\n  @Input() disableRipple: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    _elementRef: ElementRef<HTMLElement>,\n    changeDetectorRef: ChangeDetectorRef) {\n    super(_elementRef);\n    _focusMonitor.monitor(_elementRef, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the step header. */\n  focus() {\n    this._focusMonitor.focusVia(this._elementRef, 'program');\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  _getDefaultTextForState(state: StepState): string {\n    if (state == 'number') {\n      return `${this.index + 1}`;\n    }\n    if (state == 'edit') {\n      return 'create';\n    }\n    if (state == 'error') {\n      return 'warning';\n    }\n    return state;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material steppers.\n * @docs-private\n */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\nimport {StepState} from '@angular/cdk/stepper';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: StepState;\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  CdkStep,\n  CdkStepper,\n  StepContentPositionState,\n  STEPPER_GLOBAL_OPTIONS,\n  StepperOptions\n} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {DOCUMENT} from '@angular/common';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil, distinctUntilChanged} from 'rxjs/operators';\n\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel, {static: false}) stepLabel: MatStepLabel;\n\n  /** @breaking-change 8.0.0 remove the `?` after `stepperOptions` */\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher,\n              @Optional() @Inject(STEPPER_GLOBAL_OPTIONS) stepperOptions?: StepperOptions) {\n    super(stepper, stepperOptions);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({selector: '[matStepper]', providers: [{provide: CdkStepper, useExisting: MatStepper}]})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Whether ripples should be disabled for the step headers. */\n  @Input() disableRipple: boolean;\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  /** Stream of animation `done` events when the body expands/collapses. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  ngAfterContentInit() {\n    this._icons.forEach(({name, templateRef}) => this._iconOverrides[name] = templateRef);\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n\n    this._animationDone.pipe(\n      // This needs a `distinctUntilChanged` in order to avoid emitting the same event twice due\n      // to a bug in animations where the `.done` callback gets invoked twice on some browsers.\n      // See https://github.com/angular/angular/issues/24084\n      distinctUntilChanged((x, y) => x.fromState === y.fromState && x.toState === y.toState),\n      takeUntil(this._destroyed)\n    ).subscribe(event => {\n      if ((event.toState as StepContentPositionState) === 'current') {\n        this.animationDone.emit();\n      }\n    });\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    '[class.mat-stepper-label-position-end]': 'labelPosition == \"end\"',\n    '[class.mat-stepper-label-position-bottom]': 'labelPosition == \"bottom\"',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [\n    {provide: MatStepper, useExisting: MatHorizontalStepper},\n    {provide: CdkStepper, useExisting: MatHorizontalStepper}\n  ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper {\n  /** Whether the label should display in bottom or end position. */\n  @Input()\n  labelPosition: 'bottom' | 'end' = 'end';\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [\n    {provide: MatStepper, useExisting: MatVerticalStepper},\n    {provide: CdkStepper, useExisting: MatVerticalStepper}\n  ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(\n    @Optional() dir: Directionality,\n    changeDetectorRef: ChangeDetectorRef,\n    // @breaking-change 8.0.0 `elementRef` and `_document` parameters to become required.\n    elementRef?: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) _document?: any) {\n    super(dir, changeDetectorRef, elementRef, _document);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {Directive} from '@angular/core';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '[type]': 'type',\n  },\n  inputs: ['type']\n})\nexport class MatStepperNext extends CdkStepperNext {\n}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '[type]': 'type',\n  },\n  inputs: ['type']\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MAT_STEPPER_INTL_PROVIDER} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MAT_STEPPER_INTL_PROVIDER, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  providers: [{provide: CdkTable, useExisting: MatTable}],\n  encapsulation: ViewEncapsulation.None,\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef {}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef {}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends CdkFooterCellDef {}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [\n    {provide: CdkColumnDef, useExisting: MatColumnDef},\n    {provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef}\n  ],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  CDK_ROW_TEMPLATE,\n  CdkFooterRow,\n  CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef\n} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, Directive, ViewEncapsulation} from '@angular/core';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef {\n}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends CdkFooterRowDef {\n}\n\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow {\n}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow {\n}\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextColumn} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-text-column',\n  template: `\n    <ng-container matColumnDef>\n      <th mat-header-cell *matHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td mat-cell *matCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n  encapsulation: ViewEncapsulation.None,\n  // Change detection is intentionally not set to OnPush. This component's template will be provided\n  // to the table to be inserted into its view. This is problematic when change detection runs since\n  // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n  // mean's the template in the table's view will not have the updated value (and in fact will cause\n  // an ExpressionChangedAfterItHasBeenCheckedError).\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class MatTextColumn<T> extends CdkTextColumn<T> {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {MatTextColumn} from './text-column';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directives\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n\n  MatTextColumn,\n];\n\n@NgModule({\n  imports: [\n    CdkTableModule,\n    CommonModule,\n    MatCommonModule,\n  ],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  HammerInput,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subscription} from 'rxjs';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n * @docs-private\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nclass MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatSliderMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof MatSliderBase =\n        mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(mousedown)': '_onMousedown($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus(options?: FocusOptions) {\n    this._focusHostElement(options);\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper', {static: false}) private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private _shouldInvertMouseCoords() {\n    return (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private _getDirection() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onMousedown(event: MouseEvent) {\n    // Don't do anything if the slider is disabled or the\n    // user is using anything other than the main mouse button.\n    if (this.disabled || event.button !== 0) {\n      return;\n    }\n\n    const oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled || hasModifierKey(event)) {\n      return;\n    }\n\n    const oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._shouldInvertMouseCoords()) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement(options?: FocusOptions) {\n    this._elementRef.nativeElement.focus(options);\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 8.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: {message: string, action: string};\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nexport const matSnackBarAnimations: {\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('void, hidden', style({\n      transform: 'scale(0.8)',\n      opacity: 0,\n    })),\n    state('visible', style({\n      transform: 'scale(1)',\n      opacity: 1,\n    })),\n    transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n      opacity: 0\n    }))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  // In Ivy embedded views will be change detected from their declaration place, rather than\n  // where they were stamped out. This means that we can't have the snack bar container be OnPush,\n  // because it might cause snack bars that were opened from a template not to be out of date.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    '[attr.role]': '_role',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** ARIA role for the snack bar container. */\n  _role: 'alert' | 'status' | null;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n\n    // Based on the ARIA spec, `alert` and `status` roles have an\n    // implicit `assertive` and `polite` politeness respectively.\n    if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n      this._role = 'alert';\n    } else if (snackBarConfig.politeness === 'off') {\n      this._role = null;\n    } else {\n      this._role = 'status';\n    }\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n      this._completeExit();\n    }\n\n    if (toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n    // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n    // `MatSnackBar.open`).\n    this._animationState = 'hidden';\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  OnDestroy,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar implements OnDestroy {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    // Only dismiss the snack bar at the current level on destroy.\n    if (this._snackBarRefAtThisLevel) {\n      this._snackBarRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n\n      if (config.announcementMessage) {\n        this._live.clear();\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasInitialized,\n  HasInitializedCtor,\n  mixinDisabled,\n  mixinInitialized,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError,\n} from './sort-errors';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nclass MatSortBase {}\nconst _MatSortMixinBase: HasInitializedCtor & CanDisableCtor & typeof MatSortBase =\n    mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/**\n * Animations used by MatSort.\n * @docs-private\n */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  HostListener,\n  HostBinding,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {\n  debounceTime,\n  filter,\n  map,\n  startWith,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(elementRef, scrollDispatcher, ngZone);\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new Subject<AnimationEvent>();\n\n  /** Emits whenever the drawer is done animating. */\n  _animationEnd = new Subject<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  // @HostBinding is used in the class as it is expected to be extended.  Since @Component decorator\n  // metadata is not inherited by child classes, instead the host binding data is defined in a way\n  // that can be inherited.\n  // tslint:disable:no-host-decorator-in-concrete\n  @HostBinding('@transform')\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject<void>();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        (fromEvent(this._elementRef.nativeElement, 'keydown') as Observable<KeyboardEvent>).pipe(\n            filter(event => {\n              return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n            }),\n            takeUntil(this._destroyed)\n        ).subscribe(event => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n            event.preventDefault();\n        }));\n    });\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._animationEnd.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe((event: AnimationEvent) => {\n      const {fromState, toState} = event;\n\n      if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n          (toState === 'void' && fromState.indexOf('open') === 0)) {\n        this.openedChange.emit(this._opened);\n      }\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n\n    this._animationStarted.complete();\n    this._animationEnd.complete();\n    this._modeChanged.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritte.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('@transform.start', ['$event'])\n  _animationStartListener(event: AnimationEvent) {\n    this._animationStarted.next(event);\n  }\n\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritte.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('@transform.done', ['$event'])\n  _animationDoneListener(event: AnimationEvent) {\n    this._animationEnd.next(event);\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent, {static: false}) _content: MatDrawerContent;\n  @ViewChild(MatDrawerContent, {static: false}) _userContent: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  get scrollable(): CdkScrollable {\n    return this._userContent || this._content;\n  }\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              viewportRuler: ViewportRuler,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this.updateContentMargins();\n      });\n    }\n\n    // Since the minimum width of the sidenav depends on the viewport width,\n    // we need to recompute the margins if the viewport changes.\n    viewportRuler.change()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this.updateContentMargins());\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this.updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this.updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._contentMarginChanges.complete();\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        const width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        const width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      filter((event: AnimationEvent) => event.fromState !== event.toState),\n      takeUntil(this._drawers.changes),\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this.updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this.updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n  ElementRef,\n  NgZone,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent, {static: false}) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollingModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HammerInput,\n  HasTabIndex, HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\n/** @docs-private */\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nclass MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatSlideToggleMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatSlideToggleBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    // Needs to be `-1` so it can still receive programmatic focus.\n    '[attr.tabindex]': 'disabled ? null : -1',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n                                                                        ControlValueAccessor,\n                                                                        CanDisable, CanColor,\n                                                                        HasTabIndex,\n                                                                        CanDisableRipple {\n  private _onChange = (_: any) => {};\n  private _onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer', {static: false}) _thumbEl: ElementRef;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar', {static: false}) _thumbBarEl: ElementRef;\n\n  /** Name value will be applied to the input element if present. */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event is always emitted when the user toggles the slide toggle, but this does not mean\n   * the slide toggle's value has changed. The event does not fire when the user drags to change\n   * the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event is always emitted when the user drags the slide toggle to make a change greater\n   * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n   * the user toggles the slide toggle to change its value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input', {static: false}) _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() private _dir?: Directionality) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin) {\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n          // Angular does not expect events to be raised during change detection, so any state\n          // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n          // error. See https://github.com/angular/angular/issues/17793. To work around this,\n          // we defer telling the form control it has been touched until the next tick.\n          Promise.resolve().then(() => this._onTouched());\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this._onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(options?: FocusOptions): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard', options);\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this._onChange(this.checked);\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this._onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n    // slide-toggle component will be only marked for check, but no actual change detection runs\n    // automatically. Instead of going back into the zone in order to trigger a change detection\n    // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n    // we only trigger an explicit change detection for the slide-toggle view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatSlideToggleRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material slide-toggle components with the required attribute in a\n * template-driven form. The default validator for required form controls asserts\n * that the control value is not undefined but that is not appropriate for a slide-toggle\n * where the value is always defined.\n *\n * Required slide-toggle form controls are valid when checked.\n */\n@Directive({\n  selector: `mat-slide-toggle[required][formControlName],\n             mat-slide-toggle[required][formControl], mat-slide-toggle[required][ngModel]`,\n  providers: [MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR],\n})\nexport class MatSlideToggleRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\nimport {MatSlideToggleRequiredValidator} from './slide-toggle-required-validator';\n\n/** This module is used by both original and MDC-based slide-toggle implementations. */\n@NgModule({\n  exports: [MatSlideToggleRequiredValidator],\n  declarations: [MatSlideToggleRequiredValidator],\n})\n// tslint:disable-next-line:class-name\nexport class _MatSlideToggleRequiredValidatorModule {\n}\n\n@NgModule({\n  imports: [\n    _MatSlideToggleRequiredValidatorModule,\n    MatRippleModule,\n    MatCommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    _MatSlideToggleRequiredValidatorModule,\n    MatSlideToggle,\n    MatCommonModule\n  ],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nclass MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatProgressSpinnerMixinBase: CanColorCtor & typeof MatProgressSpinnerBase =\n    mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/components/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'mode === \"determinate\" ? value : null',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n  private _diameter = BASE_SIZE;\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /**\n   * Element to which we should add the generated style tags for the indeterminate animation.\n   * For most elements this is the document, but for the ones in the Shadow DOM we need to\n   * use the shadow root.\n   */\n  private _styleRoot: Node;\n\n  /**\n   * Tracks diameters of existing instances to de-dupe generated styles (default d = 100).\n   * We need to keep track of which elements the diameters were attached to, because for\n   * elements in the Shadow DOM the style tags are attached to the shadow root, rather\n   * than the document head.\n   */\n  private static _diameters = new WeakMap<Node, Set<number>>();\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean;\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation) {\n      const trackedDiameters = MatProgressSpinner._diameters;\n      const diametersForElement = trackedDiameters.get(this._styleRoot);\n\n      if (!diametersForElement || !diametersForElement.has(this._diameter)) {\n        this._attachStyleNode();\n      }\n    }\n  }\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef<HTMLElement>,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n\n    const trackedDiameters = MatProgressSpinner._diameters;\n\n    // The base size is already inserted via the component's structural styles. We still\n    // need to track it so we don't end up adding the same styles again.\n    if (!trackedDiameters.has(_document.head)) {\n      trackedDiameters.set(_document.head, new Set<number>([BASE_SIZE]));\n    }\n\n    this._styleRoot = _getShadowRoot(_elementRef.nativeElement, _document) || _document.head;\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n    this._noopAnimations = animationMode === 'NoopAnimations' &&\n        (!!defaults && !defaults._forceAnimations);\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    const styleTag: HTMLStyleElement = this._document.createElement('style');\n    const styleRoot = this._styleRoot;\n    const currentDiameter = this._diameter;\n    const diameters = MatProgressSpinner._diameters;\n    let diametersForElement = diameters.get(styleRoot);\n\n    styleTag.setAttribute('mat-spinner-animation', currentDiameter + '');\n    styleTag.textContent = this._getAnimationText();\n    styleRoot.appendChild(styleTag);\n\n    if (!diametersForElement) {\n      diametersForElement = new Set<number>();\n      diameters.set(styleRoot, diametersForElement);\n    }\n\n    diametersForElement.add(currentDiameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef<HTMLElement>, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n\n\n/** Gets the shadow root of an element, if supported and the element is inside the Shadow DOM. */\nexport function _getShadowRoot(element: HTMLElement, _document: Document): Node | null {\n  // TODO(crisbeto): see whether we should move this into the CDK\n  // feature detection utilities once #15616 gets merged in.\n  if (typeof window !== 'undefined') {\n    const head = _document.head;\n\n    // Check whether the browser supports Shadow DOM.\n    if (head && ((head as any).createShadowRoot || head.attachShadow)) {\n      const rootNode = element.getRootNode ? element.getRootNode() : null;\n\n      // We need to take the `ShadowRoot` off of `window`, because the built-in types are\n      // incorrect. See https://github.com/Microsoft/TypeScript/issues/27929.\n      if (rootNode instanceof (window as any).ShadowRoot) {\n        return rootNode;\n      }\n    }\n  }\n\n  return null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisableRipple,\n  mixinTabIndex,\n  ThemePalette,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nexport interface MatRadioDefaultOptions {\n  color: ThemePalette;\n}\n\nexport const MAT_RADIO_DEFAULT_OPTIONS =\n  new InjectionToken<MatRadioDefaultOptions>('mat-radio-default-options', {\n  providedIn: 'root',\n  factory: MAT_RADIO_DEFAULT_OPTIONS_FACTORY\n});\n\nexport function MAT_RADIO_DEFAULT_OPTIONS_FACTORY(): MatRadioDefaultOptions {\n  return {\n    color: 'accent'\n  };\n}\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n})\nexport class MatRadioGroup implements AfterContentInit, ControlValueAccessor {\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Theme color for all of the radio buttons in the group. */\n  @Input() color: ThemePalette;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) { }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n        radio._markForCheck();\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nclass MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nconst _MatRadioButtonMixinBase:\n    CanDisableRippleCtor & HasTabIndexCtor & typeof MatRadioButtonBase =\n        mixinDisableRipple(mixinTabIndex(MatRadioButtonBase));\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-primary]': 'color === \"primary\"',\n    '[class.mat-accent]': 'color === \"accent\"',\n    '[class.mat-warn]': 'color === \"warn\"',\n    // Needs to be -1 so the `focus` event still fires.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /** Theme color of the radio button. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n      (this.radioGroup && this.radioGroup.color) ||\n      this._providerOverride && this._providerOverride.color || 'accent';\n  }\n  set color(newValue: ThemePalette) { this._color = newValue; }\n  private _color: ThemePalette;\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input', {static: false}) _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n                @Optional() @Inject(MAT_RADIO_DEFAULT_OPTIONS)\n                private _providerOverride?: MatRadioDefaultOptions) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(options?: FocusOptions): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard', options);\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin && this.radioGroup) {\n          this.radioGroup._touch();\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    // We remove the `transform` here completely, rather than setting it to zero, because:\n    // 1. Having a transform can cause elements with ripples or an animated\n    //    transform to shift around in Chrome with an RTL layout (see #10023).\n    // 2. 3d transforms causes text to appear blurry on IE and Edge.\n    state('open, open-instant', style({\n      'transform': 'none',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  keyframes,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({opacity: 0, transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n      style({opacity: 0, transform: 'scale(0)', offset: 0}),\n      style({opacity: 0.5, transform: 'scale(0.99)', offset: 0.5}),\n      style({opacity: 1, transform: 'scale(1)', offset: 1})\n    ]))),\n    transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({opacity: 0}))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig},\n  ]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream to emit from when labels are changed. Use this to notify components when the labels have\n   * changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {\n  HasInitialized,\n  HasInitializedCtor,\n  mixinInitialized,\n  ThemePalette,\n  mixinDisabled,\n  CanDisableCtor,\n  CanDisable,\n} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @breaking-change 8.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nclass MatPaginatorBase {}\nconst _MatPaginatorBase: CanDisableCtor & HasInitializedCtor & typeof MatPaginatorBase =\n    mixinDisabled(mixinInitialized(MatPaginatorBase));\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, CanDisable,\n  HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** Theme color to be used for the underlying form controls. */\n  @Input() color: ThemePalette;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  private _pageIndex = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  private _length = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages() - 1;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const maxPageIndex = this.getNumberOfPages() - 1;\n    return this.pageIndex < maxPageIndex && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    if (!this.pageSize) {\n      return 0;\n    }\n\n    return Math.ceil(this.length / this.pageSize);\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Checks whether the buttons for going forwards should be disabled. */\n  _nextButtonsDisabled() {\n    return this.disabled || !this.hasNextPage();\n  }\n\n  /** Checks whether the buttons for going backwards should be disabled. */\n  _previousButtonsDisabled() {\n    return this.disabled || !this.hasPreviousPage();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Output,\n  EventEmitter,\n  Optional,\n  NgZone,\n  ViewEncapsulation,\n  AfterViewInit,\n  ViewChild,\n  OnDestroy,\n  InjectionToken,\n  inject,\n} from '@angular/core';\nimport {fromEvent, Subscription, Observable} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {DOCUMENT} from '@angular/common';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n/** Last animation end data. */\nexport interface ProgressAnimationEnd {\n  value: number;\n}\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nclass MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nconst _MatProgressBarMixinBase: CanColorCtor & typeof MatProgressBarBase =\n    mixinColor(MatProgressBarBase, 'primary');\n\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_PROGRESS_BAR_LOCATION = new InjectionToken<MatProgressBarLocation>(\n  'mat-progress-bar-location',\n  {providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY}\n);\n\n/**\n * Stubbed out location for `MatProgressBar`.\n * @docs-private\n */\nexport interface MatProgressBarLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': '(mode === \"indeterminate\" || mode === \"query\") ? null : value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': '_isNoopAnimation',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor,\n                                                      AfterViewInit, OnDestroy {\n  constructor(public _elementRef: ElementRef, private _ngZone: NgZone,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0\n               */\n              @Optional() @Inject(MAT_PROGRESS_BAR_LOCATION) location?: MatProgressBarLocation) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n\n    // because named route URLs can contain parentheses (see #12338). Also we don't use since\n    // we can't tell the difference between whether\n    // the consumer is using the hash location strategy or not, because `Location` normalizes\n    // both `/#/foo/bar` and `/foo/bar` to the same thing.\n    const path = location ? location.getPathname().split('#')[0] : '';\n    this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n    this._isNoopAnimation = _animationMode === 'NoopAnimations';\n  }\n\n  /** Flag that indicates whether NoopAnimations mode is set to true. */\n  _isNoopAnimation = false;\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) {\n    this._value = clamp(v || 0);\n\n    // When noop animation is set to true, trigger animationEnd directly.\n    if (this._isNoopAnimation) {\n      this._emitAnimationEnd();\n    }\n  }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  @ViewChild('primaryValueBar', {static: false}) _primaryValueBar: ElementRef;\n\n  /**\n   * Event emitted when animation of the primary progress bar completes. This event will not\n   * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n   * animations (indeterminate and query).\n   */\n  @Output() animationEnd = new EventEmitter<ProgressAnimationEnd>();\n\n  /** Reference to animation end subscription to be unsubscribed on destroy. */\n  private _animationEndSubscription: Subscription = Subscription.EMPTY;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n    return undefined;\n  }\n\n  ngAfterViewInit() {\n    if (!this._isNoopAnimation) {\n      // Run outside angular so change detection didn't get triggered on every transition end\n      // instead only on the animation that we care about (primary value bar's transitionend)\n      this._ngZone.runOutsideAngular((() => {\n        const element = this._primaryValueBar.nativeElement;\n\n        this._animationEndSubscription =\n            (fromEvent(element, 'transitionend') as Observable<TransitionEvent>)\n              .pipe(filter(((e: TransitionEvent) => e.target === element)))\n              .subscribe(() => this._ngZone.run(() => this._emitAnimationEnd()));\n      }));\n    }\n  }\n\n  ngOnDestroy() {\n    this._animationEndSubscription.unsubscribe();\n  }\n\n  /** Emit an animationEnd event if in determinate or buffer mode. */\n  private _emitAnimationEnd(): void {\n    if (this.mode === 'determinate' || this.mode === 'buffer') {\n      this.animationEnd.next({value: this.value});\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ESCAPE,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  DOWN_ARROW,\n  UP_ARROW,\n  HOME,\n  END,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {AnimationEvent} from '@angular/animations';\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: false,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 4;\n\n/** Base class with all of the `MatMenu` functionality. */\n// tslint:disable-next-line:class-name\nexport class _MatMenuBase implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit,\n  OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** All items inside the menu. Includes items nested inside another menu. */\n  @ContentChildren(MatMenuItem, {descendants: true}) _allItems: QueryList<MatMenuItem>;\n\n  /** Only the direct descendant menu items. */\n  private _directDescendantItems = new QueryList<MatMenuItem>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef, {static: false}) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent, {static: false}) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    const previousPanelClass = this._previousPanelClass;\n\n    if (previousPanelClass && previousPanelClass.length) {\n      previousPanelClass.split(' ').forEach((className: string) => {\n        this._classList[className] = false;\n      });\n    }\n\n    this._previousPanelClass = classes;\n\n    if (classes && classes.length) {\n      classes.split(' ').forEach((className: string) => {\n        this._classList[className] = true;\n      });\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  private _previousPanelClass: string;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 8.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @breaking-change 8.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._updateDirectDescendants();\n    this._keyManager = new FocusKeyManager(this._directDescendantItems).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._directDescendantItems.destroy();\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    // Coerce the `changes` property because Angular types it as `Observable<any>`\n    const itemChanges = this._directDescendantItems.changes as Observable<QueryList<MatMenuItem>>;\n    return itemChanges.pipe(\n      startWith(this._directDescendantItems),\n      switchMap(items => merge(...items.map((item: MatMenuItem) => item._hovered)))\n    );\n  }\n\n  /*\n   * Registers a menu item with the menu.\n   * @docs-private\n   * @deprecated No longer being used. To be removed.\n   * @breaking-change 9.0.0\n   */\n  addItem(_item: MatMenuItem) {}\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   * @deprecated No longer being used. To be removed.\n   * @breaking-change 9.0.0\n   */\n  removeItem(_item: MatMenuItem) {}\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n\n    switch (keyCode) {\n      case ESCAPE:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this.closed.emit('keydown');\n        }\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case HOME:\n      case END:\n        if (!hasModifierKey(event)) {\n          keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n          event.preventDefault();\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          manager.setFocusOrigin('keyboard');\n        }\n\n        manager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @breaking-change 8.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @breaking-change 8.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._isAnimating = true;\n\n    // Scroll the content element to the top as soon as the animation starts. This is necessary,\n    // because we move focus to the first item while it's still being animated, which can throw\n    // the browser off when it determines the scroll position. Alternatively we can move focus\n    // when the animation is done, however moving focus asynchronously will interrupt screen\n    // readers which are in the process of reading out the menu already. We take the `element`\n    // from the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n\n  /**\n   * Sets up a stream that will keep track of any newly-added menu items and will update the list\n   * of direct descendants. We collect the descendants this way, because `_allItems` can include\n   * items that are part of child menus, and using a custom way of registering items is unreliable\n   * when it comes to maintaining the item order.\n   */\n  private _updateDirectDescendants() {\n    this._allItems.changes\n      .pipe(startWith(this._allItems))\n      .subscribe((items: QueryList<MatMenuItem>) => {\n        this._directDescendantItems.reset(items.filter(item => item._parentMenu === this));\n        this._directDescendantItems.notifyOnChanges();\n      });\n  }\n}\n\n/** @docs-private We show the \"_MatMenu\" class as \"MatMenu\" in the docs. */\nexport class MatMenu extends _MatMenuBase {}\n\n// Note on the weird inheritance setup: we need three classes, because the MDC-based menu has to\n// extend `MatMenu`, however keeping a reference to it will cause the inlined template and styles\n// to be retained as well. The MDC menu also has to provide itself as a `MatMenu` in order for\n// queries and DI to work correctly, while still not referencing the actual menu class.\n// Class responsibility is split up as follows:\n// * _MatMenuBase - provides all the functionality without any of the Angular metadata.\n// * MatMenu - keeps the same name symbol name as the current menu and\n// is used as a provider for DI and query purposes.\n// * _MatMenu - the actual menu component implementation with the Angular metadata that should\n// be tree shaken away for MDC.\n\n/** @docs-public MatMenu */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu},\n    {provide: MatMenu, useExisting: _MatMenu}\n  ]\n})\n// tslint:disable-next-line:class-name\nexport class _MatMenu extends MatMenu {\n\n  constructor(elementRef: ElementRef<HTMLElement>, ngZone: NgZone,\n      @Inject(MAT_MENU_DEFAULT_OPTIONS) defaultOptions: MatMenuDefaultOptions) {\n    super(elementRef, ngZone, defaultOptions);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closingActionsSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n  private _menuCloseSubscription = Subscription.EMPTY;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /**\n   * Handles touch start events on the trigger.\n   * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n   */\n  private _handleTouchStart = () => this._openedBy = 'touch';\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  _openedBy: 'mouse' | 'touch' | null = null;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel { return this.menu; }\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor')\n  get menu() { return this._menu; }\n  set menu(menu: MatMenuPanel) {\n    if (menu === this._menu) {\n      return;\n    }\n\n    this._menu = menu;\n    this._menuCloseSubscription.unsubscribe();\n\n    if (menu) {\n      this._menuCloseSubscription = menu.close.asObservable().subscribe(reason => {\n        this._destroyMenu();\n\n        // If a click closed the menu, we should close the entire chain of nested menus.\n        if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n          this._parentMenu.closed.emit(reason);\n        }\n      });\n    }\n  }\n  private _menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /**\n   * Whether focus should be restored when the menu is closed.\n   * Note that disabling this option can have accessibility implications\n   * and it's up to you to manage focus, if you decide to turn it off.\n   */\n  @Input('matMenuTriggerRestoreFocus') restoreFocus: boolean = true;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef<HTMLElement>,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @breaking-change 8.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    _element.nativeElement.addEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    this._menuCloseSubscription.unsubscribe();\n    this._closingActionsSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._checkMenu();\n\n    const overlayRef = this._createOverlay();\n    const overlayConfig = overlayRef.getConfig();\n\n    this._setPosition(overlayConfig.positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayConfig.hasBackdrop = this.menu.hasBackdrop == null ? !this.triggersSubmenu() :\n        this.menu.hasBackdrop;\n    overlayRef.attach(this._getPortal());\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closingActionsSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program', options?: FocusOptions) {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element, origin, options);\n    } else {\n      this._element.nativeElement.focus(options);\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closingActionsSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(\n            filter(event => event.toState === 'void'),\n            take(1),\n            // Interrupt if the content got re-attached.\n            takeUntil(menu.lazyContent._attached)\n          )\n          .subscribe({\n            next: () => menu.lazyContent!.detach(),\n            // No matter whether the content got re-attached, reset the menu.\n            complete: () => this._resetMenu()\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedBy || 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (this.restoreFocus) {\n      if (!this._openedBy) {\n        // Note that the focus style will show up both for `program` and\n        // `keyboard` so we don't have to specify which one it is.\n        this.focus();\n      } else if (!this.triggersSubmenu()) {\n        this.focus(this._openedBy);\n      }\n    }\n\n    this._openedBy = null;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n\n      // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n      // Ideally we'd also have our keyboard event logic in here, however doing so will\n      // break anybody that may have implemented the `MatMenuPanel` themselves.\n      this._overlayRef.keydownEvents().subscribe();\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withLockedPosition()\n          .withTransformOriginOn('.mat-menu-panel, .mat-mdc-menu-panel'),\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      // Since right or middle button clicks won't trigger the `click` event,\n      // we shouldn't consider the menu as opened by mouse in those cases.\n      this._openedBy = event.button === 0 ? 'mouse' : null;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedBy = 'mouse';\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          // We need the `delay(0)` here in order to avoid\n          // 'changed after checked' errors in some cases. See #12194.\n          this.menu._animationDone\n            .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n  /** Gets the portal that should be attached to the overlay. */\n  private _getPortal(): TemplatePortal {\n    // Note that we can avoid this check by keeping the portal on the menu panel.\n    // While it would be cleaner, we'd have to introduce another required method on\n    // `MatMenuPanel`, making it harder to consume.\n    if (!this._portal || this._portal.templateRef !== this.menu.templateRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n    }\n\n    return this._portal;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {_MatMenu} from './menu';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n/**\n * Used by both the current `MatMenuModule` and the MDC `MatMenuModule`\n * to declare the menu-related directives.\n */\n@NgModule({\n  exports: [MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\n// tslint:disable-next-line:class-name\nexport class _MatMenuDirectivesModule {}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n    _MatMenuDirectivesModule,\n  ],\n  exports: [_MatMenu, MatMenuItem, _MatMenuDirectivesModule],\n  declarations: [_MatMenu, MatMenuItem],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  animateChild,\n  AnimationTriggerMetadata,\n  query,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nexport const matSelectAnimations: {\n  readonly transformPanelWrap: AnimationTriggerMetadata;\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation ensures the select's overlay panel animation (transformPanel) is called when\n   * closing the select.\n   * This is needed due to https://github.com/angular/angular/issues/23302\n   */\n  transformPanelWrap: trigger('transformPanelWrap', [\n      transition('* => void', query('@transformPanel', [animateChild()],\n          {optional: true}))\n  ]),\n\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0.8)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   * @deprecated Not used anymore. To be removed.\n   * @breaking-change 8.0.0\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  SPACE,\n  ENTER,\n  HOME,\n  END,\n  UP_ARROW,\n  DOWN_ARROW,\n  A,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  SimpleChanges,\n  OnChanges,\n} from '@angular/core';\nimport {\n  CanDisableRipple, CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatListAvatarCssMatStyler, MatListIconCssMatStyler} from './list';\n\n\n/** @docs-private */\nclass MatSelectionListBase {}\nconst _MatSelectionListMixinBase: CanDisableRippleCtor & typeof MatSelectionListBase =\n    mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nclass MatListOptionBase {}\nconst _MatListOptionMixinBase: CanDisableRippleCtor & typeof MatListOptionBase =\n    mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    // Manually set the \"primary\" or \"warn\" class if the color has been explicitly\n    // set to \"primary\" or \"warn\". The pseudo checkbox picks up these classes for\n    // its theme. The accent theme palette is the default and doesn't need to be set.\n    '[class.mat-primary]': 'color === \"primary\"',\n    '[class.mat-warn]': 'color === \"warn\"',\n    '[attr.aria-selected]': 'selected',\n    '[attr.aria-disabled]': 'disabled',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n  private _hasFocus = false;\n\n  @ContentChild(MatListAvatarCssMatStyler, {static: false}) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler, {static: false}) _icon: MatListIconCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text', {static: false}) _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Theme color of the list option. This sets the color of the checkbox. */\n  @Input()\n  get color(): ThemePalette { return this._color || this.selectionList.color; }\n  set color(newValue: ThemePalette) { this._color = newValue; }\n  private _color: ThemePalette;\n\n  /** Value of the option */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this.selected && newValue !== this.value) {\n      this.selected = false;\n    }\n\n    this._value = newValue;\n  }\n  private _value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    const list = this.selectionList;\n\n    if (list._value && list._value.some(value => list.compareWith(value, this._value))) {\n      this._setSelected(true);\n    }\n\n    const wasSelected = this._selected;\n\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => {\n        this.selected = false;\n      });\n    }\n\n    const hadFocus = this._hasFocus;\n    const newActiveItem = this.selectionList._removeOptionFromList(this);\n\n    // Only move focus if this option was focused at the time it was destroyed.\n    if (hadFocus && newActiveItem) {\n      newActiveItem.focus();\n    }\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? (this._text.nativeElement.textContent || '') : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this.selectionList._setFocusedOption(this);\n    this._hasFocus = true;\n  }\n\n  _handleBlur() {\n    this.selectionList._onTouched();\n    this._hasFocus = false;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list mat-list-base',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    'aria-multiselectable': 'true',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements CanDisableRipple,\n  AfterContentInit, ControlValueAccessor, OnDestroy, OnChanges {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption, {descendants: true}) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /** Theme color of the selection list. This sets the checkbox color for all list options. */\n  @Input() color: ThemePalette = 'accent';\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean = (a1, a2) => a1 === a2;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    this._markOptionsForCheck();\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Keeps track of the currently-selected value. */\n  _value: string[]|null;\n\n  /** Emits when the list has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  /** Whether the list has been destroyed. */\n  private _isDestroyed: boolean;\n\n  constructor(private _element: ElementRef<HTMLElement>, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false)\n      .withAllowedModifierKeys(['shiftKey']);\n\n    if (this._value) {\n      this._setOptionsFromValues(this._value);\n    }\n\n    // Sync external changes to the model back to the options.\n    this.selectedOptions.onChange.pipe(takeUntil(this._destroyed)).subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const disableRippleChanges = changes['disableRipple'];\n    const colorChanges = changes['color'];\n\n    if ((disableRippleChanges && !disableRippleChanges.firstChange) ||\n        (colorChanges && !colorChanges.firstChange)) {\n      this._markOptionsForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._isDestroyed = true;\n  }\n\n  /** Focuses the selection list. */\n  focus(options?: FocusOptions) {\n    this._element.nativeElement.focus(options);\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItem(option);\n  }\n\n  /**\n   * Removes an option from the selection list and updates the active item.\n   * @returns Currently-active item.\n   */\n  _removeOptionFromList(option: MatListOption): MatListOption | null {\n    const optionIndex = this._getOptionIndex(option);\n\n    if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.updateActiveItem(optionIndex - 1);\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.updateActiveItem(Math.min(optionIndex + 1, this.options.length - 1));\n      }\n    }\n\n    return this._keyManager.activeItem;\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n    const hasModifier = hasModifierKey(event);\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!hasModifier) {\n          this._toggleFocusedOption();\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        if (!hasModifier) {\n          keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n          event.preventDefault();\n        }\n        break;\n      case A:\n        if (hasModifierKey(event, 'ctrlKey')) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    // Stop reporting value changes after the list has been destroyed. This avoids\n    // cases where the list might wrongly reset its value once it is removed, but\n    // the form control is still live.\n    if (this.options && !this._isDestroyed) {\n      const value = this._getSelectedOptionValues();\n      this._onChange(value);\n      this._value = value;\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    this._value = values;\n\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values.forEach(value => {\n      const correspondingOption = this.options.find(option => {\n        // Skip options that are already in the model. This allows us to handle cases\n        // where the same primitive value is selected multiple times.\n        return option.selected ? false : this.compareWith(option.value, value);\n      });\n\n      if (correspondingOption) {\n        correspondingOption._setSelected(true);\n      }\n    });\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n\n  /** Marks all the options to be checked in the next change detection run. */\n  private _markOptionsForCheck() {\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(0.8)'\n    })),\n    transition('void => enter', group([\n      query('.mat-menu-content, .mat-mdc-menu-content', animate('100ms linear', style({\n        opacity: 1\n      }))),\n      animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({transform: 'scale(1)'})),\n    ])),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  /** Emits when the menu content has been attached. */\n  _attached = new Subject<void>();\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n\n  /**\n   * @deprecated To be removed.\n   * @breaking-change 8.0.0\n   */\n  addItem?: (item: T) => void;\n\n  /**\n   * @deprecated To be removed.\n   * @breaking-change 8.0.0\n   */\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n  Input,\n  HostListener,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nclass MatMenuItemBase {}\nconst _MatMenuItemMixinBase: CanDisableRippleCtor & CanDisableCtor & typeof MatMenuItemBase =\n    mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    '[attr.role]': 'role',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  /** ARIA role for the menu item. */\n  @Input() role: 'menuitem' | 'menuitemradio' | 'menuitemcheckbox' = 'menuitem';\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() public _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @breaking-change 8.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._elementRef, false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program', options?: FocusOptions): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin, options);\n    } else {\n      this._getHostElement().focus(options);\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritte.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('click', ['$event'])\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritte.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('mouseenter')\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n  OnChanges,\n  OnDestroy,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nclass MatListBase {}\nconst _MatListMixinBase: CanDisableRippleCtor & typeof MatListBase =\n    mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nclass MatListItemBase {}\nconst _MatListItemMixinBase: CanDisableRippleCtor & typeof MatListItemBase =\n    mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list mat-list-base'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple, OnChanges,\n  OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list, mat-action-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {\n    'class': 'mat-list mat-list-base'\n  },\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple, OnChanges, OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  constructor(private _elementRef: ElementRef<HTMLElement>) {\n    super();\n\n    if (this._getListType() === 'action-list') {\n      _elementRef.nativeElement.classList.add('mat-action-list');\n    }\n  }\n\n  _getListType(): 'list' | 'action-list' | null {\n    const nodeName = this._elementRef.nativeElement.nodeName.toLowerCase();\n\n    if (nodeName === 'mat-list') {\n      return 'list';\n    }\n\n    if (nodeName === 'mat-action-list') {\n      return 'action-list';\n    }\n\n    return null;\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @breaking-change 8.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple, OnDestroy {\n  private _isInteractiveList: boolean = false;\n  private _list?: MatNavList | MatList;\n  private _destroyed = new Subject<void>();\n\n  @ContentChildren(MatLine, {descendants: true}) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler, {static: false}) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler, {static: false}) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              _changeDetectorRef: ChangeDetectorRef,\n              @Optional() navList?: MatNavList,\n              @Optional() list?: MatList) {\n    super();\n    this._isInteractiveList = !!(navList || (list && list._getListType() === 'action-list'));\n    this._list = navList || list;\n\n    // If no type attributed is specified for <button>, set it to \"button\".\n    // If a type attribute is already specified, do nothing.\n    const element = this._getHostElement();\n\n    if (element.nodeName.toLowerCase() === 'button' && !element.hasAttribute('type')) {\n      element.setAttribute('type', 'button');\n    }\n\n    if (this._list) {\n      // React to changes in the state of the parent list since\n      // some of the item's properties depend on it (e.g. `disableRipple`).\n      this._list._stateChanges.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        _changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isInteractiveList || this.disableRipple ||\n           !!(this._list && this._list.disableRipple);\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {merge, Subscription, EMPTY} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelDefaultOptions,\n  MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,\n} from './expansion-panel';\nimport {MatAccordionTogglePosition} from './accordion-base';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '[class.mat-expansion-toggle-indicator-after]': `_getTogglePosition() === 'after'`,\n    '[class.mat-expansion-toggle-indicator-before]': `_getTogglePosition() === 'before'`,\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@.disabled]': '_animationsDisabled',\n    '(@expansionHeight.start)': '_animationStarted()',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy, FocusableOption {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  /** Whether Angular animations in the panel header should be disabled. */\n  _animationsDisabled = true;\n\n  constructor(\n      @Host() public panel: MatExpansionPanel,\n      private _element: ElementRef,\n      private _focusMonitor: FocusMonitor,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n          defaultOptions?: MatExpansionPanelDefaultOptions) {\n    const accordionHideToggleChange = panel.accordion ?\n        panel.accordion._stateChanges.pipe(\n            filter(changes => !!(changes['hideToggle'] || changes['togglePosition']))) :\n        EMPTY;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription =\n        merge(\n            panel.opened, panel.closed, accordionHideToggleChange,\n            panel._inputChanges.pipe(filter(\n                changes => {\n                  return !!(\n                    changes['hideToggle'] ||\n                    changes['disabled'] ||\n                    changes['togglePosition']);\n                  })))\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n    _focusMonitor.monitor(_element).subscribe(origin => {\n      if (origin && panel.accordion) {\n        panel.accordion._handleHeaderFocus(this);\n      }\n    });\n\n    if (defaultOptions) {\n      this.expandedHeight = defaultOptions.expandedHeight;\n      this.collapsedHeight = defaultOptions.collapsedHeight;\n    }\n  }\n\n  _animationStarted() {\n    // Currently the `expansionHeight` animation has a `void => collapsed` transition which is\n    // there to work around a bug in Angular (see #13088), however this introduces a different\n    // issue. The new transition will cause the header to animate in on init (see #16067), if the\n    // consumer has set a header height that is different from the default one. We work around it\n    // by disabling animations on the header and re-enabling them after the first animation has run.\n    // Note that Angular dispatches animation events even if animations are disabled. Ideally this\n    // wouldn't be necessary if we remove the `void => collapsed` transition, but we have to wait\n    // for https://github.com/angular/angular/issues/18847 to be resolved.\n    this._animationsDisabled = false;\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled() {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets the toggle position for the header. */\n  _getTogglePosition(): MatAccordionTogglePosition {\n    return this.panel.togglePosition;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this._toggle();\n        }\n\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin: FocusOrigin = 'program', options?: FocusOptions) {\n    this._focusMonitor.focusVia(this._element, origin, options);\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, ContentChildren, QueryList, AfterContentInit} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {HOME, END, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  MAT_ACCORDION,\n  MatAccordionBase,\n  MatAccordionDisplayMode,\n  MatAccordionTogglePosition\n} from './accordion-base';\nimport {MatExpansionPanelHeader} from './expansion-panel-header';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  providers: [{\n    provide: MAT_ACCORDION,\n    useExisting: MatAccordion\n  }],\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion implements MatAccordionBase, AfterContentInit {\n  private _keyManager: FocusKeyManager<MatExpansionPanelHeader>;\n\n  @ContentChildren(MatExpansionPanelHeader, {descendants: true})\n  _headers: QueryList<MatExpansionPanelHeader>;\n\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * Display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n\n  /** The position of the expansion indicator. */\n  @Input() togglePosition: MatAccordionTogglePosition = 'after';\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this._headers).withWrap();\n  }\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown(event: KeyboardEvent) {\n    const {keyCode} = event;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME) {\n      if (!hasModifierKey(event)) {\n        manager.setFirstItemActive();\n        event.preventDefault();\n      }\n    } else if (keyCode === END) {\n      if (!hasModifierKey(event)) {\n        manager.setLastItemActive();\n        event.preventDefault();\n      }\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  _handleHeaderFocus(header: MatExpansionPanelHeader) {\n    this._keyManager.updateActiveItem(header);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\nexport const MAT_GRID_LIST = new InjectionToken<MatGridListBase>('MAT_GRID_LIST');\n\n/**\n * Base interface for a `MatGridList`.\n * @docs-private\n */\nexport interface MatGridListBase {\n  cols: number;\n  gutterSize: string;\n  rowHeight: number | string;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  Optional,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n  Inject,\n} from '@angular/core';\nimport {MatLine, setLines} from '@angular/material/core';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    @Optional() @Inject(MAT_GRID_LIST) public _gridList?: MatGridListBase) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = Math.round(coerceNumberProperty(value)); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    (this._element.nativeElement.style as any)[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    const lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  /**\n   * Updates the tile positions.\n   * @param numColumns Amount of columns in the grid.\n   */\n  update(numColumns: number, tiles: MatGridTile[]) {\n    this.columnIndex = 0;\n    this.rowIndex = 0;\n\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    const gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n      // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n    } while ((gapEndIndex - gapStartIndex < tileCols) || (gapEndIndex == 0));\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number): void;\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList): void;\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n\n    if (!cssCalcAllowedValue.test(this.fixedRowHeight)) {\n      throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n    }\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string {\n  return `calc(${exp})`;\n}\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return value.match(/([A-Za-z%]+)$/) ? value : `${value}px`;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  providers: [{\n    provide: MAT_GRID_LIST,\n    useExisting: MatGridList\n  }],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements MatGridListBase, OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /** Used for determiningthe position of each tile in the grid. */\n  private _tileCoordinator: TileCoordinator;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile, {descendants: true}) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) {\n    this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n  }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = `${value == null ? '' : value}`; }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  get rowHeight(): string | number { return this._rowHeight; }\n  set rowHeight(value: string | number) {\n    const newValue = `${value == null ? '' : value}`;\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    if (!this._tileCoordinator) {\n      this._tileCoordinator = new TileCoordinator();\n    }\n\n\n    const tracker = this._tileCoordinator;\n    const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\n    const direction = this._dir ? this._dir.value : 'ltr';\n\n    this._tileCoordinator.update(this.cols, tiles);\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      (this._element.nativeElement.style as any)[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n  OnDestroy,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/common/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry implements OnDestroy {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  ngOnDestroy() {\n   this._svgIconConfigs.clear();\n   this._iconSetConfigs.clear();\n   this._cachedIconsByUrl.clear();\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    // Use the `id=\"iconName\"` syntax in order to escape special\n    // characters in the ID (versus using the #iconName syntax).\n    const iconSource = iconSet.querySelector(`[id=\"${iconName}\"]`);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n  inject,\n  Inject,\n  OnDestroy,\n  AfterViewChecked,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nclass MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatIconMixinBase: CanColorCtor & typeof MatIconBase = mixinColor(MatIconBase);\n\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_ICON_LOCATION = new InjectionToken<MatIconLocation>('mat-icon-location', {\n  providedIn: 'root',\n  factory: MAT_ICON_LOCATION_FACTORY\n});\n\n/**\n * Stubbed out location for `MatIcon`.\n * @docs-private\n */\nexport interface MatIconLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_ICON_LOCATION_FACTORY(): MatIconLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n  'clip-path',\n  'color-profile',\n  'src',\n  'cursor',\n  'fill',\n  'filter',\n  'marker',\n  'marker-start',\n  'marker-mid',\n  'marker-end',\n  'mask',\n  'stroke'\n];\n\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\n\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon notranslate',\n    '[class.mat-icon-inline]': 'inline',\n    '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, AfterViewChecked,\n  CanColor, OnDestroy {\n\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  /** Keeps track of the current page path. */\n  private _previousPath?: string;\n\n  /** Keeps track of the elements and attributes that we've prefixed with the current path. */\n  private _elementsWithExternalReferences?: Map<Element, {name: string, value: string}[]>;\n\n  constructor(\n      elementRef: ElementRef<HTMLElement>,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string,\n      /**\n       * @deprecated `location` parameter to be made required.\n       * @breaking-change 8.0.0\n       */\n      @Optional() @Inject(MAT_ICON_LOCATION) private _location?: MatIconLocation) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    const svgIconChanges = changes['svgIcon'];\n\n    if (svgIconChanges) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else if (svgIconChanges.previousValue) {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngAfterViewChecked() {\n    const cachedElements = this._elementsWithExternalReferences;\n\n    if (cachedElements && this._location && cachedElements.size) {\n      const newPath = this._location.getPathname();\n\n      // We need to check whether the URL has changed on each change detection since\n      // the browser doesn't have an API that will let us react on link clicks and\n      // we can't depend on the Angular router. The references need to be updated,\n      // because while most browsers don't care whether the URL is correct after\n      // the first render, Safari will break if the user navigates to a different\n      // page and the SVG isn't re-rendered.\n      if (newPath !== this._previousPath) {\n        this._previousPath = newPath;\n        this._prependPathToReferences(newPath);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    // Note: we do this fix here, rather than the icon registry, because the\n    // references have to point to the URL at the time that the icon was created.\n    if (this._location) {\n      const path = this._location.getPathname();\n      this._previousPath = path;\n      this._cacheChildrenWithExternalReferences(svg);\n      this._prependPathToReferences(path);\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n\n  /**\n   * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n   * reference. This is required because WebKit browsers require references to be prefixed with\n   * the current path, if the page has a `base` tag.\n   */\n  private _prependPathToReferences(path: string) {\n    const elements = this._elementsWithExternalReferences;\n\n    if (elements) {\n      elements.forEach((attrs, element) => {\n        attrs.forEach(attr => {\n          element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n        });\n      });\n    }\n  }\n\n  /**\n   * Caches the children of an SVG element that have `url()`\n   * references that we need to prefix with the current path.\n   */\n  private _cacheChildrenWithExternalReferences(element: SVGElement) {\n    const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n    const elements = this._elementsWithExternalReferences =\n        this._elementsWithExternalReferences || new Map();\n\n    for (let i = 0; i < elementsWithFuncIri.length; i++) {\n      funcIriAttributes.forEach(attr => {\n        const elementWithReference = elementsWithFuncIri[i];\n        const value = elementWithReference.getAttribute(attr);\n        const match = value ? value.match(funcIriPattern) : null;\n\n        if (match) {\n          let attributes = elements.get(elementWithReference);\n\n          if (!attributes) {\n            attributes = [];\n            elements.set(elementWithReference, attributes);\n          }\n\n          attributes!.push({name: attr, value: match[1]});\n        }\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {MatCalendarCellCssClasses} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {\n  getActiveOffset,\n  isSameMultiYearView,\n  MatMultiYearView,\n  yearsPerPage\n} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n\n    // The offset from the active year to the \"slot\" for the starting year is the\n    // *actual* first rendered year in the multi-year view, and the last year is\n    // just yearsPerPage - 1 away.\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const minYearOfPage = activeYear - getActiveOffset(\n      this._dateAdapter, this.calendar.activeDate, this.calendar.minDate, this.calendar.maxDate);\n    const maxYearOfPage = minYearOfPage + yearsPerPage - 1;\n    return `${minYearOfPage} \\u2013 ${maxYearOfPage}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return isSameMultiYearView(\n      this._dateAdapter, date1, date2, this.calendar.minDate, this.calendar.maxDate);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView, {static: false}) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView, {static: false}) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView, {static: false}) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n    this._changeDetectorRef.markForCheck();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n    this._changeDetectorRef.markForCheck();\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change =\n        changes['minDate'] || changes['maxDate'] || changes['dateFilter'];\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Updates today's date after an update of the active date */\n  updateTodaysDate() {\n    let view = this.currentView == 'month' ? this.monthView :\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\n\n    view.ngAfterContentInit();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material datepicker.\n * @docs-private\n */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(1, 0.8)'\n    })),\n    transition('void => enter',  animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n      opacity: 1,\n      transform: 'scale(1, 1)'\n    }))),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n\n    // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n    // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n    transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  DateAdapter,\n  mixinColor,\n  ThemePalette,\n} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendarCellCssClasses} from './calendar-body';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nclass MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nconst _MatDatepickerContentMixinBase: CanColorCtor & typeof MatDatepickerContentBase =\n    mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar, {static: false}) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    // Usually this would be handled by `open` which ensures that we can only have one overlay\n    // open at a time, however since we reset the variables in async handlers some overlays\n    // may slip through if the user opens and closes multiple times in quick succession (e.g.\n    // by holding down the enter key).\n    if (this._dialogRef) {\n      this._dialogRef.close();\n    }\n\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(event => {\n      if (event) {\n        event.preventDefault();\n      }\n\n      this.close();\n    });\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withLockedPosition()\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats, ThemePalette} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    'aria-haspopup': 'dialog',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    if (!value) {\n      return;\n    }\n\n    this._datepicker = value;\n    this._datepicker._registerInput(this);\n    this._datepickerSubscription.unsubscribe();\n\n    this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n      this.value = selected;\n      this._cvaOnChange(selected);\n      this._onTouched();\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  _datepicker: MatDatepicker<D>;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef<HTMLInputElement>,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n    if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    } else {\n      this._validatorOnChange();\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette(): ThemePalette {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {MatButton} from '@angular/material/button';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the\n    // consumer may have provided, while still being able to receive focus.\n    '[attr.tabindex]': '-1',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n    '(focus)': '_button.focus()',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    if (this._disabled === undefined && this.datepicker) {\n      return this.datepicker.disabled;\n    }\n\n    return !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Whether ripples on the toggle should be disabled. */\n  @Input() disableRipple: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon, {static: false}) _customIcon: MatDatepickerToggleIcon;\n\n  /** Underlying button element. */\n  @ViewChild('button', {static: false}) _button: MatButton;\n\n  constructor(\n    public _intl: MatDatepickerIntl,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Attribute('tabindex') defaultTabIndex: string) {\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['datepicker']) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/** MatAccordion's toggle positions. */\nexport type MatAccordionTogglePosition = 'before' | 'after';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** The position of the expansion indicator. */\n  togglePosition: MatAccordionTogglePosition;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  EventEmitter,\n  ElementRef,\n  Input,\n  Inject,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ViewChild,\n  InjectionToken,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take, distinctUntilChanged} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {MAT_ACCORDION, MatAccordionBase, MatAccordionTogglePosition} from './accordion-base';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * Object that can be used to override the default options\n * for all of the expansion panels in a module.\n */\nexport interface MatExpansionPanelDefaultOptions {\n  /** Height of the header while the panel is expanded. */\n  expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  collapsedHeight: string;\n\n  /** Whether the toggle indicator should be hidden. */\n  hideToggle: boolean;\n}\n\n/**\n * Injection token that can be used to configure the defalt\n * options for the expansion panel component.\n */\nexport const MAT_EXPANSION_PANEL_DEFAULT_OPTIONS =\n    new InjectionToken<MatExpansionPanelDefaultOptions>('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges,\n  OnDestroy {\n  private _document: Document;\n  private _hideToggle = false;\n  private _togglePosition: MatAccordionTogglePosition;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n\n  /** The position of the expansion indicator. */\n  @Input()\n  get togglePosition(): MatAccordionTogglePosition {\n    return this._togglePosition || (this.accordion && this.accordion.togglePosition);\n  }\n  set togglePosition(value: MatAccordionTogglePosition) {\n    this._togglePosition = value;\n  }\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent, {static: false}) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body', {static: false}) _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  /** Stream of body animation done events. */\n  _bodyAnimationDone = new Subject<AnimationEvent>();\n\n  constructor(@Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(DOCUMENT) _document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode: string,\n              @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n                  defaultOptions?: MatExpansionPanelDefaultOptions) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._bodyAnimationDone.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      if (event.fromState !== 'void') {\n        if (event.toState === 'expanded') {\n          this.afterExpand.emit();\n        } else if (event.toState === 'collapsed') {\n          this.afterCollapse.emit();\n        }\n      }\n    });\n\n    if (defaultOptions) {\n      this.hideToggle = defaultOptions.hideToggle;\n    }\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      // We don't need to subscribe to the `stateChanges` of the parent accordion because each time\n      // the [displayMode] input changes, the change detection will also cover the host bindings\n      // of this expansion panel.\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._bodyAnimationDone.complete();\n    this._inputChanges.complete();\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nclass MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nconst _MatInputMixinBase: CanUpdateErrorStateCtor & typeof MatInputBase =\n    mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /** Whether the component is a native html select. */\n  _isNativeSelect = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      (this._elementRef.nativeElement as HTMLInputElement).type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n    protected _platform: Platform,\n    /** @docs-private */\n    @Optional() @Self() public ngControl: NgControl,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n    private _autofillMonitor: AutofillMonitor,\n    ngZone: NgZone) {\n\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n\n    const element = this._elementRef.nativeElement;\n\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || element;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n    this._isNativeSelect = element.nodeName.toLowerCase() === 'select';\n\n    if (this._isNativeSelect) {\n      this.controlType = (element as HTMLSelectElement).multiple ? 'mat-native-select-multiple' :\n                                                                   'mat-native-select';\n    }\n  }\n\n  ngOnInit() {\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n        this.autofilled = event.isAutofilled;\n        this.stateChanges.next();\n      });\n    }\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(options?: FocusOptions): void {\n    this._elementRef.nativeElement.focus(options);\n  }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && (!this.readonly || !isFocused)) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this._elementRef.nativeElement.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    if (this._isNativeSelect) {\n      // For a single-selection `<select>`, the label should float when the selected option has\n      // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n      // overlapping the label with the options.\n      const selectElement = this._elementRef.nativeElement as HTMLSelectElement;\n      const firstOption: HTMLOptionElement | undefined = selectElement.options[0];\n\n      // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n      // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n      return this.focused || selectElement.multiple || !this.empty ||\n             !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label);\n    } else {\n      return this.focused || !this.empty;\n    }\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n    // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n    // \"minutes\" field was actually clicked. See: https://github.com/angular/components/issues/12849\n    if (!this.focused) {\n      this.focus();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * Extra CSS classes that can be associated with a calendar cell.\n */\nexport type MatCalendarCellCssClasses = string | string[] | Set<string> | {[key: string]: any};\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean,\n              public cssClasses?: MatCalendarCellCssClasses) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody implements OnChanges {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  _firstRowOffset: number;\n\n  /** Padding for the individual date cells. */\n  _cellPadding: string;\n\n  /** Width of an individual cell. */\n  _cellWidth: string;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (cell.enabled) {\n      this.selectedValueChange.emit(cell.value);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const columnChanges = changes['numCols'];\n    const {rows, numCols} = this;\n\n    if (changes['rows'] || columnChanges) {\n      this._firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\n    }\n\n    if (changes['cellAspectRatio'] || columnChanges || !this._cellPadding) {\n      this._cellPadding = `${50 * this.cellAspectRatio / numCols}%`;\n    }\n\n    if (columnChanges || !this._cellWidth) {\n      this._cellWidth = `${100 / numCols}%`;\n    }\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        const activeCell: HTMLElement | null =\n            this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n\n        if (activeCell) {\n          activeCell.focus();\n        }\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell, MatCalendarCellCssClasses} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody, {static: false}) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n      case SPACE:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._initWeekdays();\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Initializes the weekdays. */\n  private _initWeekdays() {\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n        return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      const cellClasses = this.dateClass ? this.dateClass(date) : undefined;\n\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, cellClasses));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody, {static: false}) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n      case SPACE:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, END, HOME} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nclass MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nconst _MatChipListMixinBase: CanUpdateErrorStateCtor & typeof MatChipListBase =\n    mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /**\n   * When a chip is destroyed, we store the index of the destroyed chip until the chips\n   * query list notifies about the update. This is necessary because we cannot determine an\n   * appropriate chip that should receive focus until the array of chips updated completely.\n   */\n  private _lastDestroyedChipIndex: number | null = null;\n\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipTextControl;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n    this._syncChipsState();\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this._syncChipsState();\n  }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip, {\n    // We need to use `descendants: true`, because Ivy will no longer match\n    // indirect descendants if it's left as false.\n    descendants: true\n  }) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    if (this._dir) {\n      this._dir.change\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(dir => this._keyManager.withHorizontalOrientation(dir));\n    }\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._allowFocusEscape();\n    });\n\n    // When the list changes, re-subscribe\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      if (this.disabled) {\n        // Since this happens after the content has been\n        // checked, we need to defer it to the next tick.\n        Promise.resolve().then(() => {\n          this._syncChipsState();\n        });\n      }\n\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.stateChanges.complete();\n\n    this._dropSubscriptions();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipTextControl): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick(event: MouseEvent) {\n    if (!this._originatesFromChip(event)) {\n      this.focus();\n    }\n  }\n\n  /**\n   * Focuses the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(options?: FocusOptions): void {\n    if (this.disabled) {\n      return;\n    }\n\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput(options);\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput(options?: FocusOptions) {\n    if (this._chipInput) {\n      this._chipInput.focus(options);\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      if (event.keyCode === HOME) {\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n      } else if (event.keyCode === END) {\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n  protected _updateFocusForDestroyedChips() {\n    // Move focus to the closest chip. If no other chips remain, focus the chip-list itself.\n    if (this._lastDestroyedChipIndex != null) {\n      if (this.chips.length) {\n        const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n        this._keyManager.setActiveItem(newChipIndex);\n      } else {\n        this.focus();\n      }\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this._hasFocusedChip()) {\n      this._keyManager.setActiveItem(-1);\n    }\n\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /**\n   * Removes the `tabindex` from the chip list and resets it back afterwards, allowing the\n   * user to tab out of it. This prevents the list from capturing focus and redirecting\n   * it back to the first chip, creating a focus trap, if it user tries to tab away.\n   */\n  _allowFocusEscape() {\n    if (this._tabIndex !== -1) {\n      this._tabIndex = -1;\n\n      setTimeout(() => {\n        this._tabIndex = this._userTabIndex || 0;\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      const chip = event.chip;\n      const chipIndex = this.chips.toArray().indexOf(event.chip);\n\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n\n  /** Checks whether an event comes from inside a chip element. */\n  private _originatesFromChip(event: Event): boolean {\n    let currentElement = event.target as HTMLElement | null;\n\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      if (currentElement.classList.contains('mat-chip')) {\n        return true;\n      }\n\n      currentElement = currentElement.parentElement;\n    }\n\n    return false;\n  }\n\n  /** Checks whether any of the chips is focused. */\n  private _hasFocusedChip() {\n    return this.chips.some(chip => chip._hasFocus);\n  }\n\n  /** Syncs the list's state with the individual chips. */\n  private _syncChipsState() {\n    if (this.chips) {\n      this.chips.forEach(chip => {\n        chip.disabled = this._disabled;\n        chip._chipListMultiple = this.multiple;\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Inject, Input, OnChanges, Output} from '@angular/core';\nimport {hasModifierKey, TAB} from '@angular/cdk/keycodes';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipList} from './chip-list';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.placeholder]': 'placeholder || null',\n    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n  }\n})\nexport class MatChipInput implements MatChipTextControl, OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] | Set<number> = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled || (this._chipList && this._chipList.disabled); }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement>,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    // Allow the user's focus to escape when they're tabbing forward. Note that we don't\n    // want to do this when going backwards, because focus should go back to the first chip.\n    if (event && event.keyCode === TAB && !hasModifierKey(event, 'shiftKey')) {\n      this._chipList._allowFocusEscape();\n    }\n\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event)) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(options?: FocusOptions): void {\n    this._inputElement.focus(options);\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(event: KeyboardEvent) {\n    if (hasModifierKey(event)) {\n      return false;\n    }\n\n    const separators = this.separatorKeyCodes;\n    const keyCode = event.keyCode;\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** ID of the element that labels the dialog. */\n  ariaLabelledBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /**\n   * Whether the dialog should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\nconst animationBody = [\n  // Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  state('void, exit', style({opacity: 0, transform: 'scale(0.7)'})),\n  state('enter', style({transform: 'none'})),\n  transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)',\n      style({transform: 'none', opacity: 1}))),\n  transition('* => void, * => exit',\n      animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({opacity: 0}))),\n];\n\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nexport const matDialogAnimations: {\n  readonly dialogContainer: AnimationTriggerMetadata;\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that is applied on the dialog container by defalt. */\n  dialogContainer: trigger('dialogContainer', animationBody),\n\n  /** @deprecated @breaking-change 8.0.0 Use `matDialogAnimations.dialogContainer` instead. */\n  slideDialog: trigger('slideDialog', animationBody)\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.dialogContainer],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@dialogContainer]': '_state',\n    '(@dialogContainer.start)': '_onAnimationStart($event)',\n    '(@dialogContainer.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n    this._ariaLabelledBy = _config.ariaLabelledBy || null;\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    const element = this._elementRef.nativeElement;\n\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(element);\n    }\n\n    // If we were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    } else {\n      const activeElement = this._document.activeElement;\n\n      // Otherwise ensure that focus is on the dialog container. It's possible that a different\n      // component tried to move focus while the open animation was running. See:\n      // https://github.com/angular/components/issues/16215. Note that we only want to do this\n      // if the focus isn't inside the dialog already, because it's possible that the consumer\n      // turned off `autoFocus` in order to move focus themselves.\n      if (activeElement !== element && !element.contains(activeElement)) {\n        element.focus();\n      }\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClosed = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Handle to the timeout that's running as a fallback in case the exit animation doesn't fire. */\n  private _closeFallbackTimeout: number;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => {\n      clearTimeout(this._closeFallbackTimeout);\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n      this._beforeClosed.complete();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => {\n        return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n      }))\n      .subscribe(event => {\n        event.preventDefault();\n        this.close();\n      });\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(event => {\n      this._beforeClosed.next(dialogResult);\n      this._beforeClosed.complete();\n      this._overlayRef.detachBackdrop();\n\n      // The logic that disposes of the overlay depends on the exit animation completing, however\n      // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n      // timeout which will clean everything up if the animation hasn't fired within the specified\n      // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n      // vast majority of cases the timeout will have been cleared before it has the chance to fire.\n      this._closeFallbackTimeout = setTimeout(() => {\n        this._overlayRef.dispose();\n      }, event.totalTime + 100);\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClosed(): Observable<R | undefined> {\n    return this._beforeClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Add a CSS class or an array of classes to the overlay pane. */\n  addPanelClass(classes: string | string[]): this {\n    this._overlayRef.addPanelClass(classes);\n    return this;\n  }\n\n  /** Remove a CSS class or an array of classes from the overlay pane. */\n  removePanelClass(classes: string | string[]): this {\n    this._overlayRef.removePanelClass(classes);\n    return this;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  afterOpen(): Observable<void> {\n    return this.afterOpened();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   * @deprecated Use `beforeClosed` instead.\n   * @breaking-change 8.0.0\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this.beforeClosed();\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n  () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog implements OnDestroy {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenedAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when a dialog has been opened.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this.afterOpened;\n  }\n\n  get _afterAllClosed(): Subject<void> {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  // TODO (jelbourn): tighten the typing right-hand side of this expression.\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined))) as Observable<any>;\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions: MatDialogConfig,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) scrollStrategy: any,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpened.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    this._closeDialogs(this.openDialogs);\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  ngOnDestroy() {\n    // Only close the dialogs at this level on destroy\n    // since the parent service may still be active.\n    this._closeDialogs(this._openDialogsAtThisLevel);\n    this._afterAllClosedAtThisLevel.complete();\n    this._afterOpenedAtThisLevel.complete();\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight,\n      disposeOnNavigation: dialogConfig.closeOnNavigation\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n  }\n\n  /** Closes all of the dialogs in an array. */\n  private _closeDialogs(dialogs: MatDialogRef<any>[]) {\n    let i = dialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      dialogs[i].close();\n    }\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel || null',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-card',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  }\n})\nexport class MatCard {\n  // @breaking-change 9.0.0 `_animationMode` parameter to be made required.\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {}\n}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewChecked,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nclass MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[attr.tabindex]': 'null',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewChecked, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple,\n    FocusableOption {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, aria-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input', {static: false}) _inputElement: ElementRef<HTMLInputElement>;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple, {static: false}) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  constructor(elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    this._focusMonitor.monitor(elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state change\n        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n        // telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => {\n          this._onTouched();\n          _changeDetectorRef.markForCheck();\n        });\n      }\n    });\n  }\n\n  // TODO: Delete next major revision.\n  ngAfterViewChecked() {}\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this.disabled) {\n      this._disabled = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n    // component will be only marked for check, but no actual change detection runs automatically.\n    // Instead of going back into the zone in order to trigger a change detection which causes\n    // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n    // an explicit change detection for the checkbox view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    const event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(origin: FocusOrigin = 'keyboard', options?: FocusOptions): void {\n    this._focusMonitor.focusVia(this._inputElement, origin, options);\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n/** This module is used by both original and MDC-based checkbox implementations. */\n@NgModule({\n  exports: [MatCheckboxRequiredValidator],\n  declarations: [MatCheckboxRequiredValidator],\n})\n// tslint:disable-next-line:class-name\nexport class _MatCheckboxRequiredValidatorModule {\n}\n\n@NgModule({\n  imports: [\n    CommonModule, MatRippleModule, MatCommonModule, ObserversModule,\n    _MatCheckboxRequiredValidatorModule\n  ],\n  exports: [MatCheckbox, MatCommonModule, _MatCheckboxRequiredValidatorModule],\n  declarations: [MatCheckbox],\n})\nexport class MatCheckboxModule {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nclass MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nconst _MatChipMixinBase: CanColorCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatChipBase =\n    mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationsDisabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down. The ripple config\n   * is set to the global ripple options since we don't have any configurable options for\n   * the chip ripples.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig & RippleGlobalOptions;\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || !!this.rippleConfig.disabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether animations for the chip are enabled. */\n  _animationsDisabled: boolean;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** Whether the chip list is in multi-selection mode. */\n  _chipListMultiple: boolean = false;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar, {static: false}) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon, {static: false}) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove), {static: false}) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    const coercedValue = coerceBooleanProperty(value);\n\n    if (coercedValue !== this._selected) {\n      this._selected = coercedValue;\n      this._dispatchSelectionChange();\n    }\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to its selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if its parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\n    // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\n    return this.selectable && (this._chipListMultiple || this.selected) ?\n        this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS)\n              globalRippleOptions: RippleGlobalOptions | null,\n              // @breaking-change 8.0.0 `animationMode` parameter to become required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n    this.rippleConfig = globalRippleOptions || {};\n    this._animationsDisabled = animationMode === 'NoopAnimations';\n  }\n\n  _addHostClassName() {\n    const basicChipAttrName = 'mat-basic-chip';\n    const element = this._elementRef.nativeElement as HTMLElement;\n\n    if (element.hasAttribute(basicChipAttrName) ||\n        element.tagName.toLowerCase() === basicChipAttrName) {\n      element.classList.add(basicChipAttrName);\n      return;\n    } else {\n      element.classList.add('mat-standard-chip');\n    }\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange(true);\n    }\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n    this._dispatchSelectionChange(isUserInput);\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Handles click events on the chip. */\n  _handleClick(event: Event) {\n    if (this.disabled) {\n      event.preventDefault();\n    } else {\n      event.stopPropagation();\n    }\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        this._ngZone.run(() => {\n          this._hasFocus = false;\n          this._onBlur.next({chip: this});\n        });\n      });\n  }\n\n  private _dispatchSelectionChange(isUserInput = false) {\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick($event)',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {}\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(event: Event): void {\n    const parentChip = this._parentChip;\n\n    if (parentChip.removable && !parentChip.disabled) {\n      parentChip.remove();\n    }\n\n    // We need to stop event propagation because otherwise the event will bubble up to the\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\n    // reset the focused chip that has been focused after chip removal. Usually the parent\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n    // that the chip is being removed before the event bubbles up.\n    event.stopPropagation();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  CanColorCtor,\n  CanDisableCtor,\n  CanDisableRippleCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nclass MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nconst _MatButtonMixinBase: CanDisableRippleCtor & CanDisableCtor & CanColorCtor &\n    typeof MatButtonBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[attr.disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple, FocusableOption {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple, {static: false}) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (this._getHostElement() as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(_origin?: FocusOrigin, options?: FocusOptions): void {\n    // Note that we aren't using `_origin`, but we need to keep it because some internal consumers\n    // use `MatButton` in a `FocusKeyManager` and we need it to match `FocusableOption`.\n    this._getHostElement().focus(options);\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Material design anchor button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string) {\n    super(elementRef, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  mixinDisableRipple,\n  CanDisableRippleCtor,\n} from '@angular/material/core';\n\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n/** Possible appearance styles for the button toggle. */\nexport type MatButtonToggleAppearance = 'legacy' | 'standard';\n\n/**\n * Represents the default options for the button toggle that can be configured\n * using the `MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatButtonToggleDefaultOptions {\n  appearance?: MatButtonToggleAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nexport const MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS =\n    new InjectionToken<MatButtonToggleDefaultOptions>('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n\n\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 8.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[attr.aria-disabled]': 'disabled',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"',\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n  private _vertical = false;\n  private _multiple = false;\n  private _disabled = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** The appearance for all the buttons in the group. */\n  @Input() appearance: MatButtonToggleAppearance;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => {\n        toggle.name = this._name;\n        toggle._markForCheck();\n      });\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether multiple button toggle group is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(\n    private _changeDetector: ChangeDetectorRef,\n    @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n        defaultOptions?: MatButtonToggleDefaultOptions) {\n\n      this.appearance =\n          defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   * @param deferEvents Whether to defer emitting the change events.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle,\n                    select: boolean,\n                    isUserInput = false,\n                    deferEvents = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (this._selectionModel) {\n      if (select) {\n        this._selectionModel.select(toggle);\n      } else {\n        this._selectionModel.deselect(toggle);\n      }\n    } else {\n      deferEvents = true;\n    }\n\n    // We need to defer in some cases in order to avoid \"changed after checked errors\", however\n    // the side-effect is that we may end up updating the model value out of sequence in others\n    // The `deferEvents` flag allows us to decide whether to do it on a case-by-case basis.\n    if (deferEvents) {\n      Promise.resolve(() => this._updateModelValue(isUserInput));\n    } else {\n      this._updateModelValue(isUserInput);\n    }\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel && this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n\n  /** Syncs up the group's value with the model and emits the change event. */\n  private _updateModelValue(isUserInput: boolean) {\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nclass MatButtonToggleBase {}\nconst _MatButtonToggleMixinBase: CanDisableRippleCtor & typeof MatButtonToggleBase =\n    mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n    'class': 'mat-button-toggle',\n    // Always reset the tabindex to -1 so it doesn't conflict with the one on the `button`,\n    // but can still receive focus from things like cdkFocusInitial.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    '[attr.name]': 'null',\n    '(focus)': 'focus()',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, aria-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button', {static: false}) _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** The appearance style of the button. */\n  @Input()\n  get appearance(): MatButtonToggleAppearance {\n    return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n  }\n  set appearance(value: MatButtonToggleAppearance) {\n    this._appearance = value;\n  }\n  private _appearance: MatButtonToggleAppearance;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n              @Attribute('tabindex') defaultTabIndex: string,\n              @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n                  defaultOptions?: MatButtonToggleDefaultOptions) {\n    super();\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n    this.appearance =\n        defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n\n  ngOnDestroy() {\n    const group = this.buttonToggleGroup;\n\n    this._focusMonitor.stopMonitoring(this._elementRef);\n\n    // Remove the toggle from the selection once it's destroyed. Needs to happen\n    // on the next tick in order to avoid \"changed after checked\" errors.\n    if (group && group._isSelected(this)) {\n      group._syncButtonToggle(this, false, false, true);\n    }\n  }\n\n  /** Focuses the button. */\n  focus(options?: FocusOptions): void {\n    this._buttonElement.nativeElement.focus(options);\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {fromEvent, merge, Subject} from 'rxjs';\nimport {startWith, take, takeUntil} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {NgControl} from '@angular/forms';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nclass MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nconst _MatFormFieldMixinBase: CanColorCtor & typeof MatFormFieldBase =\n    mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options for the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here\n  // in form-field-input.css. The MatInput styles are fairly minimal so it shouldn't be a\n  // big deal for people who aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-input.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-has-label]': '_hasFloatingLabel()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, OnDestroy, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /**\n   * Whether the outline gap needs to be calculated\n   * immediately on the next change detection run.\n   */\n  private _outlineGapCalculationNeededImmediately = false;\n\n  /** Whether the outline gap needs to be calculated next time the zone has stabilized. */\n  private _outlineGapCalculationNeededOnStable = false;\n\n  private _destroyed = new Subject<void>();\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance { return this._appearance; }\n  set appearance(value: MatFormFieldAppearance) {\n    const oldValue = this._appearance;\n\n    this._appearance = value || (this._defaults && this._defaults.appearance) || 'legacy';\n\n    if (this._appearance === 'outline' && oldValue !== value) {\n      this._outlineGapCalculationNeededOnStable = true;\n    }\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ViewChild('underline', {static: false}) underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer', {static: true}) _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer', {static: false}) _inputContainerRef: ElementRef;\n  @ViewChild('label', {static: false}) private _label: ElementRef;\n\n  @ContentChild(MatFormFieldControl, {static: false}) _controlNonStatic: MatFormFieldControl<any>;\n  @ContentChild(MatFormFieldControl, {static: true}) _controlStatic: MatFormFieldControl<any>;\n  get _control() {\n    // TODO(crisbeto): we need this hacky workaround in order to support both Ivy\n    // and ViewEngine. We should clean this up once Ivy is the default renderer.\n    return this._explicitFormFieldControl || this._controlNonStatic || this._controlStatic;\n  }\n  set _control(value) {\n    this._explicitFormFieldControl = value;\n  }\n  private _explicitFormFieldControl: MatFormFieldControl<any>;\n\n  @ContentChild(MatLabel, {static: false}) _labelChildNonStatic: MatLabel;\n  @ContentChild(MatLabel, {static: true}) _labelChildStatic: MatLabel;\n  get _labelChild() {\n    return this._labelChildNonStatic || this._labelChildStatic;\n  }\n\n  @ContentChild(MatPlaceholder, {static: false}) _placeholderChild: MatPlaceholder;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef, private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS) private _defaults:\n          MatFormFieldDefaultOptions, private _platform: Platform, private _ngZone: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n\n    // Set the default through here so we invoke the setter on the first run.\n    this.appearance = (_defaults && _defaults.appearance) ? _defaults.appearance : 'legacy';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n\n    const control = this._control;\n\n    if (control.controlType) {\n      this._elementRef.nativeElement.classList.add(`mat-form-field-type-${control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value changes.\n    if (control.ngControl && control.ngControl.valueChanges) {\n      control.ngControl.valueChanges\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    // Note that we have to run outside of the `NgZone` explicitly,\n    // in order to avoid throwing users into an infinite loop\n    // if `zone-patch-rxjs` is included.\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(takeUntil(this._destroyed)).subscribe(() => {\n        if (this._outlineGapCalculationNeededOnStable) {\n          this.updateOutlineGap();\n        }\n      });\n    });\n\n    // Run change detection and update the outline if the suffix or prefix changes.\n    merge(this._prefixChildren.changes, this._suffixChildren.changes).subscribe(() => {\n      this._outlineGapCalculationNeededOnStable = true;\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (this._dir) {\n      this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => this.updateOutlineGap());\n    }\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n    if (this._outlineGapCalculationNeededImmediately) {\n      this.updateOutlineGap();\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: keyof NgControl): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        const startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        const endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    const labelEl = this._label ? this._label.nativeElement : null;\n\n    if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length ||\n        !labelEl.textContent.trim()) {\n      return;\n    }\n\n    if (!this._platform.isBrowser) {\n      // getBoundingClientRect isn't available on the server.\n      return;\n    }\n    // If the element is not present in the DOM, the outline gap will need to be calculated\n    // the next time it is checked and in the DOM.\n    if (!document.documentElement!.contains(this._elementRef.nativeElement)) {\n      this._outlineGapCalculationNeededImmediately = true;\n      return;\n    }\n\n    let startWidth = 0;\n    let gapWidth = 0;\n\n    const container = this._connectionContainerRef.nativeElement;\n    const startEls = container.querySelectorAll('.mat-form-field-outline-start');\n    const gapEls = container.querySelectorAll('.mat-form-field-outline-gap');\n\n    if (this._label && this._label.nativeElement.children.length) {\n      const containerRect = container.getBoundingClientRect();\n\n      // If the container's width and height are zero, it means that the element is\n      // invisible and we can't calculate the outline gap. Mark the element as needing\n      // to be checked the next time the zone stabilizes. We can't do this immediately\n      // on the next change detection, because even if the element becomes visible,\n      // the `ClientRect` won't be reclaculated immediately. We reset the\n      // `_outlineGapCalculationNeededImmediately` flag some we don't run the checks twice.\n      if (containerRect.width === 0 && containerRect.height === 0) {\n        this._outlineGapCalculationNeededOnStable = true;\n        this._outlineGapCalculationNeededImmediately = false;\n        return;\n      }\n\n      const containerStart = this._getStartEnd(containerRect);\n      const labelStart = this._getStartEnd(labelEl.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n\n      for (const child of labelEl.children) {\n        labelWidth += child.offsetWidth;\n      }\n      startWidth = labelStart - containerStart - outlineGapPadding;\n      gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n    }\n\n    for (let i = 0; i < startEls.length; i++) {\n      startEls.item(i).style.width = `${startWidth}px`;\n    }\n    for (let i = 0; i < gapEls.length; i++) {\n      gapEls.item(i).style.width = `${gapWidth}px`;\n    }\n\n    this._outlineGapCalculationNeededOnStable =\n        this._outlineGapCalculationNeededImmediately = false;\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [\n    CommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nclass MatAutocompleteBase {}\nconst _MatAutocompleteMixinBase: CanDisableRippleCtor & typeof MatAutocompleteBase =\n    mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  // The @ViewChild query for TemplateRef here needs to be static because some code paths\n  // lead to the overlay being created before change detection has finished for this component.\n  // Notably, another component may trigger `focus` on the autocomplete-trigger.\n\n  /** @docs-private */\n  @ViewChild(TemplateRef, {static: true}) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel', {static: false}) panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, {descendants: true}) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      this._classList = value.split(' ').reduce((classList, className) => {\n        classList[className.trim()] = true;\n        return classList;\n      }, {} as {[key: string]: boolean});\n    } else {\n      this._classList = {};\n    }\n\n    this._setVisibilityClasses(this._classList);\n    this._elementRef.nativeElement.className = '';\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._setVisibilityClasses(this._classList);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n\n  /** Sets the autocomplete visibility classes on a classlist based on the panel is visible. */\n  private _setVisibilityClasses(classList: {[key: string]: boolean}) {\n    classList['mat-autocomplete-visible'] = this.showPanel;\n    classList['mat-autocomplete-hidden'] = !this.showPanel;\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Renderer2,\n  SimpleChanges,\n  isDevMode,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled, ThemePalette} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextId = 0;\n\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nclass MatBadgeBase {}\n\nconst _MatBadgeMixinBase:\n    CanDisableCtor & typeof MatBadgeBase = mixinDisabled(MatBadgeBase);\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  inputs: ['disabled: matBadgeDisabled'],\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n    '[class.mat-badge-disabled]': 'disabled',\n  },\n})\nexport class MatBadge extends _MatBadgeMixinBase implements OnDestroy, OnChanges, CanDisable {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge') content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      const badgeElement = this._badgeElement;\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n\n      if (badgeElement) {\n        newDescription ? badgeElement.setAttribute('aria-label', newDescription) :\n            badgeElement.removeAttribute('aria-label');\n      }\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement | undefined;\n\n  constructor(\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef<HTMLElement>,\n      private _ariaDescriber: AriaDescriber,\n      private _renderer: Renderer2,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n      super();\n\n      if (isDevMode()) {\n        const nativeElement = _elementRef.nativeElement;\n        if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n          throw Error('matBadge must be attached to an element node.');\n        }\n      }\n    }\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const contentChange = changes['content'];\n\n    if (contentChange) {\n      const value = contentChange.currentValue;\n      this._hasContent = value != null && `${value}`.trim().length > 0;\n      this._updateTextContent();\n    }\n  }\n\n  ngOnDestroy() {\n    const badgeElement = this._badgeElement;\n\n    if (badgeElement) {\n      if (this.description) {\n        this._ariaDescriber.removeDescription(badgeElement, this.description);\n      }\n\n      // When creating a badge through the Renderer, Angular will keep it in an index.\n      // We have to destroy it ourselves, otherwise it'll be retained in memory.\n      if (this._renderer.destroyNode) {\n        this._renderer.destroyNode(badgeElement);\n      }\n    }\n  }\n\n  /**\n   * Gets the element into which the badge's content is being rendered.\n   * Undefined if the element hasn't been created (e.g. if the badge doesn't have content).\n   */\n  getBadgeElement(): HTMLElement | undefined {\n    return this._badgeElement;\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    const badgeElement = this._renderer.createElement('span');\n    const activeClass = 'mat-badge-active';\n    const contentClass = 'mat-badge-content';\n\n    // Clear any existing badges which may have persisted from a server-side render.\n    this._clearExistingBadges(contentClass);\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add(contentClass);\n    badgeElement.textContent = this.content;\n\n    if (this._animationMode === 'NoopAnimations') {\n      badgeElement.classList.add('_mat-animation-noopable');\n    }\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n  /** Clears any existing badges that might be left over from server-side rendering. */\n  private _clearExistingBadges(cssClass: string) {\n    const element = this._elementRef.nativeElement;\n    let childCount = element.children.length;\n\n    // Use a reverse while, because we'll be removing elements from the list as we're iterating.\n    while (childCount--) {\n      const currentChild = element.children[childCount];\n\n      if (currentChild.classList.contains(cssClass)) {\n        element.removeChild(currentChild);\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\nimport {InjectionToken, ViewContainerRef} from '@angular/core';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n\n  /**\n   * Whether the bottom sheet should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  // Note that this is disabled by default, because while the a11y recommendations are to focus\n  // the first focusable element, doing so prevents screen readers from reading out the\n  // rest of the bottom sheet content.\n  /** Whether the bottom sheet should focus the first focusable element on open. */\n  autoFocus?: boolean = false;\n\n  /**\n   * Whether the bottom sheet should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the bottom sheet. */\n  scrollStrategy?: ScrollStrategy;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'hidden') {\n      this._restoreFocus();\n    } else if (event.toState === 'visible') {\n      this._trapFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    const element = this._elementRef.nativeElement;\n\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(element);\n    }\n\n    if (this.bottomSheetConfig.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    } else {\n      const activeElement = this._document.activeElement;\n\n      // Otherwise ensure that focus is on the container. It's possible that a different\n      // component tried to move focus while the open animation was running. See:\n      // https://github.com/angular/components/issues/16215. Note that we only want to do this\n      // if the focus isn't inside the bottom sheet already, because it's possible that the\n      // consumer turned off `autoFocus` in order to move focus themselves.\n      if (activeElement !== element && !element.contains(activeElement)) {\n        element.focus();\n      }\n    }\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet was opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this.bottomSheetConfig.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common';\nimport {ESCAPE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Whether the user is allowed to close the bottom sheet. */\n  disableClose: boolean | undefined;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  /** Handle to the timeout that's running as a fallback in case the exit animation doesn't fire. */\n  private _closeFallbackTimeout: number;\n\n  constructor(\n    containerInstance: MatBottomSheetContainer,\n    private _overlayRef: OverlayRef,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location) {\n    this.containerInstance = containerInstance;\n    this.disableClose = containerInstance.bottomSheetConfig.disableClose;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged\n        .pipe(filter(event => event.phaseName === 'done' && event.toState === 'hidden'), take(1))\n        .subscribe(() => {\n          clearTimeout(this._closeFallbackTimeout);\n          _overlayRef.dispose();\n        });\n\n    _overlayRef.detachments().pipe(take(1)).subscribe(() => {\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    merge(\n      _overlayRef.backdropClick(),\n      _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n    ).subscribe(event => {\n      if (!this.disableClose &&\n        (event.type !== 'keydown' || !hasModifierKey(event as KeyboardEvent))) {\n        event.preventDefault();\n        this.dismiss();\n      }\n    });\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(event => {\n        // The logic that disposes of the overlay depends on the exit animation completing, however\n        // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n        // timeout which will clean everything up if the animation hasn't fired within the specified\n        // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n        // vast majority of cases the timeout will have been cleared before it has fired.\n        this._closeFallbackTimeout = setTimeout(() => {\n          this._overlayRef.dispose();\n        }, event.totalTime + 100);\n\n        this._overlayRef.detachBackdrop();\n      });\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  Injectable,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  InjectionToken,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/** Injection token that can be used to specify default bottom sheet options. */\nexport const MAT_BOTTOM_SHEET_DEFAULT_OPTIONS =\n    new InjectionToken<MatBottomSheetConfig>('mat-bottom-sheet-default-options');\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet implements OnDestroy {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet,\n      @Optional() private _location?: Location,\n      @Optional() @Inject(MAT_BOTTOM_SHEET_DEFAULT_OPTIONS)\n          private _defaultOptions?: MatBottomSheetConfig) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config =\n        _applyConfigDefaults(this._defaultOptions || new MatBottomSheetConfig(), config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef, this._location);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._bottomSheetRefAtThisLevel) {\n      this._bottomSheetRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      disposeOnNavigation: config.closeOnNavigation,\n      maxWidth: '100%',\n      scrollStrategy: config.scrollStrategy || this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position().global().centerHorizontally().bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param defaults Object containing the default values to which to fall back.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(defaults: MatBottomSheetConfig,\n                              config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...defaults, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FocusOptions, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': '_getAriaSelected()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements FocusableOption, AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** The unique ID of the option. */\n  @Input() id: string = `mat-option-${_uniqueIdCounter++}`;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(_origin?: FocusOrigin, options?: FocusOptions): void {\n    // Note that we aren't using `_origin`, but we need to keep it because some internal consumers\n    // use `MatOption` in a `FocusKeyManager` and we need it to match `FocusableOption`.\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus(options);\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if ((event.keyCode === ENTER || event.keyCode === SPACE) && !hasModifierKey(event)) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /**\n   * Gets the `aria-selected` value for the option. We explicitly omit the `aria-selected`\n   * attribute from single-selection, unselected options. Including the `aria-selected=\"false\"`\n   * attributes adds a significant amount of noise to screen-reader users without providing useful\n   * information.\n   */\n  _getAriaSelected(): boolean|null {\n    return this.selected || (this.multiple ? false : null);\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the MatFormField.\n * @docs-private\n */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed in front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode, Version} from '@angular/core';\nimport {HammerLoader, HAMMER_LOADER} from '@angular/platform-browser';\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {VERSION as CDK_VERSION} from '@angular/cdk';\n\n// Private version constant to circumvent test/build issues,\n// i.e. avoid core to depend on the @angular/material primary entry-point\n// Can be removed once the Material primary entry-point no longer\n// re-exports all secondary entry-points\nconst VERSION = new Version('8.1.3');\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(\n    @Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean,\n    @Optional() @Inject(HAMMER_LOADER) private _hammerLoader?: HammerLoader) {\n\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._checkCdkVersionMatch();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    const window = this._window as any;\n    return window && (window.__karma__ || window.jasmine);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    // We need to assert that the `body` is defined, because these checks run very early\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\n    if (!this._document || !this._document.body || typeof getComputedStyle !== 'function') {\n      return;\n    }\n\n    const testElement = this._document.createElement('div');\n\n    testElement.classList.add('mat-theme-loaded-marker');\n    this._document.body.appendChild(testElement);\n\n    const computedStyle = getComputedStyle(testElement);\n\n    // In some situations the computed style of the test element can be null. For example in\n    // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n    if (computedStyle && computedStyle.display !== 'none') {\n      console.warn(\n        'Could not find Angular Material core theme. Most Material ' +\n        'components may not work as expected. For more info refer ' +\n        'to the theming guide: https://material.angular.io/guide/theming'\n      );\n    }\n\n    this._document.body.removeChild(testElement);\n  }\n\n  /** Checks whether the material version matches the cdk version */\n  private _checkCdkVersionMatch(): void {\n    if (VERSION.full !== CDK_VERSION.full) {\n      console.warn(\n          'The Angular Material version (' + VERSION.full + ') does not match ' +\n          'the Angular CDK version (' + CDK_VERSION.full + ').\\n' +\n          'Please ensure the versions of these two packages exactly match.'\n      );\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !(this._window as any)['Hammer'] && !this._hammerLoader) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableCtor = Constructor<CanDisable>;\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport type CanColorCtor = Constructor<CanColor>;\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n    base: T, defaultColor?: ThemePalette): CanColorCtor & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableRippleCtor = Constructor<CanDisableRipple>;\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T): CanDisableRippleCtor & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** @docs-private */\nexport type HasTabIndexCtor = Constructor<HasTabIndex>;\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : HasTabIndexCtor & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {Constructor} from './constructor';\n\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState(): void;\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: CanUpdateErrorStateCtor & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** @docs-private */\nexport type HasInitializedCtor = Constructor<HasInitialized>;\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    HasInitializedCtor & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 8.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nlet SUPPORTS_INTL_API: boolean;\n\n// We need a try/catch around the reference to `Intl`, because accessing it in some cases can\n// cause IE to throw. These cases are tied to particular versions of Windows and can happen if\n// the consumer is providing a polyfilled `Map`. See:\n// https://github.com/Microsoft/ChakraCore/issues/3189\n// https://github.com/angular/components/issues/15687\ntry {\n  SUPPORTS_INTL_API = typeof Intl != 'undefined';\n} catch {\n  SUPPORTS_INTL_API = false;\n}\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return new Date(date.getTime());\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {startWith} from 'rxjs/operators';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport function setLines(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n  // Note: doesn't need to unsubscribe, because `changes`\n  // gets completed by Angular when the view is destroyed.\n  lines.changes.pipe(startWith(lines)).subscribe(({length}) => {\n    setClass(element, 'mat-2-line', false);\n    setClass(element, 'mat-3-line', false);\n    setClass(element, 'mat-multi-line', false);\n\n    if (length === 2 || length === 3) {\n      setClass(element, `mat-${length}-line`, true);\n    } else if (length > 3) {\n      setClass(element, `mat-multi-line`, true);\n    }\n  });\n}\n\n/** Adds or removes a class from an element. */\nfunction setClass(element: ElementRef<HTMLElement>, className: string, isAdd: boolean): void {\n  const classList = element.nativeElement.classList;\n  isAdd ? classList.add(className) : classList.remove(className);\n}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n * @deprecated Use `setLines` instead.\n * @breaking-change 8.0.0\n */\nexport class MatLineSetter {\n  constructor(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n    setLines(lines, element);\n  }\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/** Options that apply to all the event listeners that are bound by the ripple renderer. */\nconst passiveEventOptions = normalizePassiveListenerOptions({passive: true});\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef<HTMLElement>,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents\n        .set('mousedown', this._onMousedown)\n        .set('mouseup', this._onPointerUp)\n        .set('mouseleave', this._onPointerUp)\n\n        .set('touchstart', this._onTouchStart)\n        .set('touchend', this._onPointerUp)\n        .set('touchcancel', this._onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration;\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this._runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-run the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this._runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) => {\n        element.addEventListener(type, fn, passiveEventOptions);\n      });\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private _onMousedown = (event: MouseEvent) => {\n    // Screen readers will fire fake mouse events for space/enter. Skip launching a\n    // ripple in this case for consistency with the non-screen-reader experience.\n    const isFakeMousedown = isFakeMousedownFromScreenReader(event);\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private _onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      // Use `changedTouches` so we skip any touches where the user put\n      // their finger down, but used another finger to tap the element again.\n      const touches = event.changedTouches;\n\n      for (let i = 0; i < touches.length; i++) {\n        this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\n      }\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private _onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private _runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, passiveEventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('8.1.3');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n  'longpress',\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft'\n];\n\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n */\nconst noopHammerInstance: HammerInstance = {\n  on: () => {},\n  off: () => {},\n};\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  /** List of new event names to add to the gesture support list */\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n    if (!hammer) {\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n      // undefined).\n      // @breaking-change 8.0.0\n      return noopHammerInstance;\n    }\n\n    const mc = new hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new hammer.Pan();\n    const swipe = new hammer.Swipe();\n    const press = new hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Since the slide event threshold is set to zero, the slide recognizer can fire and\n    // accidentally reset the longpress recognizer. In order to make sure that the two\n    // recognizers can run simultaneously but don't affect each other, we allow the slide\n    // recognizer to recognize while a longpress is being processed.\n    // See: https://github.com/hammerjs/hammer.js/blob/master/src/manager.js#L123-L124\n    longpress.recognizeWith(slide);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    /** Reference to the ripple HTML element. */\n    public element: HTMLElement,\n    /** Ripple configuration used for the ripple. */\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions?: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /**\n   * Ripple configuration from the directive's input values.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n    };\n  }\n\n  /**\n   * Whether ripples on pointer-down are disabled or not.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '../common-behaviors/disabled';\n\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nclass MatOptgroupBase { }\nconst _MatOptgroupMixinBase: CanDisableCtor & typeof MatOptgroupBase =\n    mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["this","_changeDetectorRef","markForCheck","selectedIndex","_inkBar","hide","type","Component","args","selector","exportAs","inputs","template","styles","host","class","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","[class.mat-primary]","[class.mat-accent]","[class.mat-warn]","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","NgZone","ChangeDetectorRef","ViewportRuler","Platform","decorators","Optional","String","Inject","ANIMATION_MODULE_TYPE","MatTabNav","propDecorators","_tabListContainer","ViewChild","static","_tabList","_nextPaginator","_previousPaginator","backgroundColor","Input","disableRipple","color","MatTabLinkBase","_MatTabLinkMixinBase","mixinTabIndex","mixinDisableRipple","mixinDisabled","MatTabLink","_tabNavBar","elementRef","ngZone","platform","globalRippleOptions","tabIndex","_focusMonitor","animationMode","_this","_super","call","_tabLinkRipple","setupTriggerEvents","nativeElement","rippleConfig","parseInt","animation","enterDuration","exitDuration","monitor","get","_isActive","value","updateActiveLink","enumerable","configurable","disabled","stopMonitoring","Directive","[attr.aria-current]","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-disabled]","[class.mat-tab-label-active]","undefined","MAT_RIPPLE_GLOBAL_OPTIONS","Attribute","FocusMonitor","MatTabsModule","NgModule","imports","CommonModule","MatCommonModule","PortalModule","MatRippleModule","ObserversModule","A11yModule","exports","MatTabGroup","MatTabLabel","MatTab","MatTabContent","declarations","MatInkBar","MatTabLabelWrapper","MatTabBody","MatTabBodyPortal","MatTabHeader","MatToolbarBase","_elementRef","_MatToolbarMixinBase","mixinColor","MatToolbarRow","MatToolbar","_platform","document","_document","tslib_1.__extends","prototype","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","changes","subscribe","length","Array","from","childNodes","filter","node","classList","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","_MatTreeNodeMixinBase","CdkTreeNode","MatTreeNode","_tree","role","Number","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","providers","provide","useExisting","ElementRef","CdkTree","MatTreeNodeDef","CdkTreeNodeDef","data","MatNestedTreeNode","_differs","_disabled","Object","defineProperty","coerceBooleanProperty","_tabIndex","ngAfterContentInit","ngOnDestroy","CdkNestedTreeNode","CDK_TREE_NODE_OUTLET_NODE","IterableDiffers","MatTreeNodePadding","CdkTreeNodePadding","level","indent","MatTreeNodeOutlet","viewContainer","_node","CdkTreeNodeOutlet","ViewContainerRef","MatTree","MatTreeNodeToggle","apply","arguments","recursive","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","MatTreeModule","CdkTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","isArray","_flattenChildren","pipe","take","children","forEach","child","index","childParentMap","slice","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","_treeControl","_treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","next","dataNodes","connect","collectionViewer","viewChange","expansionModel","onChange","merge","map","disconnect","DataSource","MatTreeNestedDataSource","SELECT_PANEL_PADDING_X","MatTableDataSource","_paginator","paginator","_updateChangeSubscription","sortChange","_sort","initialized","observableOf","pageChange","page","_internalPageChanges","dataStream","filteredData","combineLatest","_filter","_a","_filterData","orderedData","_orderData","paginatedData","_pageData","_renderChangesSubscription","unsubscribe","_renderData","obj","filterPredicate","_updatePaginator","sort","sortData","startIndex","pageIndex","pageSize","filteredDataLength","Promise","resolve","then","lastPageIndex","Math","ceil","newPageIndex","min","_MAT_INK_BAR_POSITIONER","InjectionToken","providedIn","factory","_MAT_INK_BAR_POSITIONER_FACTORY","_ngZone","_inkBarPositioner","_animationMode","alignToElement","element","show","requestAnimationFrame","runOutsideAngular","_setStyles","style","visibility","positions","inkBar","left","width","[class._mat-animation-noopable]","TemplateRef","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","_stateChanges","Subject","position","origin","isActive","ngOnChanges","hasOwnProperty","complete","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","ariaLabel","ariaLabelledby","matTabsAnimations","translateTab","trigger","state","transform","minHeight","transition","animate","componentFactoryResolver","viewContainerRef","_host","_centeringSub","Subscription","EMPTY","_leavingSub","_beforeCentering","startWith","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","ComponentFactoryResolver","forwardRef","CdkPortalOutlet","_dir","changeDetectorRef","_dirChangeSubscription","_translateTabComplete","_onCentering","EventEmitter","_onCentered","animationDuration","change","dir","_computePositionAnimationState","distinctUntilChanged","x","y","fromState","toState","event","emit","_positionIndex","_computePositionFromOrigin","_onTranslateTabStarted","clientHeight","_getLayoutDirection","animations","Output","_portalHost","PortalHostDirective","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","MatPaginatedTabHeader","_viewportRuler","_scrollDistance","_selectedIndexChanged","_destroyed","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_stopScrolling","_selectedIndex","selectFocusedIndex","indexFocused","fromEvent","takeUntil","_stopInterval","coerceNumberProperty","_keyManager","updateActiveItemIndex","_handlePaginatorPress","dirChange","resize","realign","updatePagination","_alignInkBarToSelectedTab","FocusKeyManager","_items","withHorizontalOrientation","withWrap","updateActiveItem","newFocusIndex","_setTabFocus","ngAfterContentChecked","_tabLabelCount","_scrollToLabel","_checkScrollingControls","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","hasModifierKey","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","focusIndex","_itemSelected","onKeydown","_onContentChanges","_currentTextContent","run","_checkPaginationEnabled","_isValidIndex","setActiveItem","tab","toArray","containerEl","scrollLeft","scrollWidth","scrollDistance","translateX","round","TRIDENT","EDGE","_scrollTo","_scrollHeader","direction","viewLength","scrollAmount","_handlePaginatorClick","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","_getMaxScrollDistance","selectedItem","selectedLabelWrapper","timer","maxScrollDistance","distance","max","Directionality","viewportRuler","_disableRipple","outputs","nextId","MatTabChangeEvent","MAT_TABS_CONFIG","MatTabGroupBase","_MatTabGroupMixinBase","defaultConfig","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","_animationDuration","test","_backgroundColor","remove","add","indexToSelect","_clampTabIndex","isFirstRun_1","_createChangeEvent","_tabs","_subscribeToTabLabels","tabs","realignInkBar","_tabHeader","_focusChanged","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","_getTabIndex","idx","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","_element","items","active","_arrowDirection","_setAnimationTransitionState","viewState","_showIndicatorHint","MatSortHeader","_isSorted","id","_getArrowDirectionState","_getArrowViewState","_viewState","_updateArrowDirection","start","_isDisabled","_getAriaSortAttribute","_renderArrow","(click)","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","arrowPosition","allowChildren","MatSort","disableClear","MatSortModule","MAT_SORT_HEADER_INTL_PROVIDER","MatStepLabel","CdkStepLabel","MatStepperIntl","optionalLabel","Injectable","MAT_STEPPER_INTL_PROVIDER","deps","SkipSelf","useFactory","MAT_STEPPER_INTL_PROVIDER_FACTORY","MatStepHeader","_intl","_intlSubscription","focusVia","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","optional","_getDefaultTextForState","errorMessage","iconOverrides","selected","matStepperAnimations","horizontalStepTransition","verticalStepTransition","MatStepperIcon","templateRef","name","MatStep","stepper","_errorStateMatcher","stepperOptions","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","STEPPER_GLOBAL_OPTIONS","MatStepper","_icons","_iconOverrides","_steps","CdkStepper","ContentChildren","MatHorizontalStepper","[class.mat-stepper-label-position-end]","[class.mat-stepper-label-position-bottom]","aria-orientation","labelPosition","MatVerticalStepper","_orientation","ctorParameters","MatStepperNext","[type]","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatStepperModule","MatButtonModule","CdkStepperModule","MatIconModule","MatTable","stickyCssClass","CDK_TABLE_TEMPLATE","CdkTable","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatFooterCellDef","CdkFooterCellDef","MatColumnDef","CdkColumnDef","sticky","stickyEnd","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatFooterRowDef","CdkFooterRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","MatFooterRow","Default","CdkFooterRow","MatRow","CdkRow","MatTextColumn","EXPORTED_DECLARATIONS","MatTableModule","CdkTableModule","MAX_SAFE_INTEGER","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","a","b","valueA","valueB","comparatorResult","dataStr","keys","reduce","currentTerm","key","toLowerCase","transformedFilter","indexOf","vertical","_getDirection","_invertAxis","percent","MatSlider","_shouldInvertMouseCoords","detectChanges","_onMouseenter","_sliderDimensions","_getSliderDimensions","_updateTickIntervalPercent","_onMousedown","button","oldValue","_isSliding","_focusHostElement","_updateValueFromPosition","clientX","clientY","_emitInputEvent","_emitChangeEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","onTouched","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","_clamp","step","pos","offset","top","size","posComponent","exactValue","_calculateValue","closestValue","_controlValueAccessorChangeFn","valueChange","input","tickInterval","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","_tickIntervalPercent","MatSliderChange","source","_calculatePercentage","percentage","_sliderWrapper","getBoundingClientRect","options","_blurHostElement","blur","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","MAT_SLIDER_VALUE_ACCESSOR","(focus)","(blur)","(mousedown)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","thumbLabel","displayWith","MatSliderModule","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SimpleSnackBar","snackBarRef","action","matSnackBarAnimations","snackBarState","opacity","MatSnackBarContainer","snackBarConfig","_animationState","_role","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","_completeExit","onEnter_1","enter","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","MatSnackBarModule","OverlayModule","entryComponents","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","clear","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","bottom","create","Overlay","LiveAnnouncer","Injector","BreakpointObserver","MatSortBase","_MatSortMixinBase","mixinInitialized","sortables","Map","_direction","getSortInvalidDirectionError","_disableClear","v","register","sortable","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","deregister","delete","getNextSortDirection","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","SORT_ANIMATION_TRANSITION","AnimationDurations","ENTERING","AnimationCurves","STANDARD_CURVE","keyframes","query","animateChild","MatSortHeaderIntl","sortButtonLabel","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","_columnDef","_disableViewStateAnimation","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_setIndicatorHintVisible","visible","MatDrawer","matDrawerAnimations","transformDrawer","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","mode","HostBinding","openedChange","_openedStream","openedStart","_closedStream","closedStart","onPositionChanged","opened","_animationStartListener","HostListener","_animationDoneListener","backdropClick","_doCheckSubject","_validateDrawers","updateContentMargins","_autosize","defaultAutosize","MatDrawerContainer","_backdropOverride","drawer","_drawers","_isDrawerOpen","_start","_end","debounceTime","_contentMarginChanges","close","_left","_width","_right","_contentMargins","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_onBackdropClicked","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","[class.mat-drawer-container-explicit-backdrop]","ContentChild","MatDrawerContent","_userContent","autosize","MatSidenavContent","scrollDispatcher","[style.margin-left.px]","[style.margin-right.px]","ScrollDispatcher","MatSidenav","_fixedInViewport","_fixedTopGap","_fixedBottomGap","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","fixedTopGap","MatSidenavContainer","MatSidenavModule","ScrollingModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","_onChange","_","_onTouched","_uniqueId","_required","_checked","_dragging","toggleChange","dragChange","focusOrigin","_onChangeEvent","stopPropagation","_inputElement","_onInputClick","toggle","_getDragPercentage","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[attr.tabindex]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","required","MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR","NG_VALIDATORS","MatSlideToggleRequiredValidator","CheckboxRequiredValidator","_MatSlideToggleRequiredValidatorModule","MatSlideToggleModule","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","_percent","_roundToDecimal","toString","split","pop","parseFloat","toFixed","invert","_isMinValue","axis","scale","_thumbGap","tickSize","backgroundSize","sign","rotate","MatProgressSpinner","_diameter","BASE_SIZE","_fallbackAnimation","trackedDiameters","_diameters","head","Set","_styleRoot","_getShadowRoot","_noopAnimations","_forceAnimations","diameter","strokeWidth","animationClass","diametersForElement","_attachStyleNode","_strokeWidth","newValue","viewBox","_circleRadius","PI","_strokeCircumference","styleTag","createElement","styleRoot","currentDiameter","diameters","setAttribute","_getAnimationText","appendChild","INDETERMINATE_ANIMATION_TEMPLATE","replace","[style.width.px]","[style.height.px]","[attr.mode]","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_DEFAULT_OPTIONS","MAT_RADIO_DEFAULT_OPTIONS_FACTORY","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_updateRadioButtonNames","_markRadiosForCheck","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","_markForCheck","isAlreadySelected","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_providerOverride","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_color","_isRippleDisabled","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","_autoFocus","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","_animationEnd","_opened","_modeChanged","autoFocus","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","_openedVia","enabled","_enableAnimations","destroy","_animationStarted","isOpen","openedVia","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","[class.mat-select-empty]","matSelectAnimations","transformPanelWrap","transformPanel","MatFormFieldControl","MatSelect","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","Self","MAT_SELECT_SCROLL_STRATEGY","overlayDir","CdkConnectedOverlay","MatOption","optionGroups","MatOptgroup","customTrigger","MatSelectTrigger","placeholder","multiple","disableOptionCentering","compareWith","errorStateMatcher","sortComparator","selectionChange","MatSelectModule","MatOptionModule","MatFormFieldModule","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatTooltip","_scrollDispatcher","_ariaDescriber","scrollStrategy","_defaultOptions","hammerLoader","showDelay","hideDelay","_message","_manualListeners","_scrollStrategy","hasGestures","window","Hammer","IOS","ANDROID","listener","addEventListener","_updatePosition","_tooltipInstance","updatePosition","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","elementStyle","nodeName","webkitUserSelect","userSelect","msUserSelect","draggable","webkitUserDrag","removeEventListener","delay","_showTimeoutId","_hideTimeoutId","_detach","_portal","TooltipComponent","afterHidden","isVisible","e","ESCAPE","_handleTouchend","touchendHideDelay","scrollableAncestors","getAncestorScrollContainers","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","AriaDescriber","HAMMER_LOADER","_visibility","_closeOnInteraction","_onHide","_isHandset","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","MatTooltipModule","MatPaginatorIntl","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","maxPageIndex","_changePageSize","floor","_nextButtonsDisabled","_previousButtonsDisabled","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","MAT_PROGRESS_BAR_LOCATION","MAT_PROGRESS_BAR_LOCATION_FACTORY","progressbarId","MatProgressBar","location","_isNoopAnimation","_bufferValue","animationEnd","_animationEndSubscription","path","getPathname","_rectangleFillValue","clamp","_emitAnimationEnd","_primaryTransform","_bufferTransform","bufferValue","_primaryValueBar","target","aria-valuemin","aria-valuemax","MatProgressBarModule","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_PANEL","MatMenu","_MatMenu","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_FACTORY","MatMenuTrigger","_parentMenu","_menuItemInstance","_menuOpen","_closingActionsSubscription","_hoverSubscription","_menuCloseSubscription","_handleTouchStart","_openedBy","restoreFocus","menuOpened","onMenuOpen","menuClosed","onMenuClose","_triggersSubmenu","triggersSubmenu","menu","_menu","reason","_destroyMenu","_checkMenu","_handleHover","toggleMenu","closeMenu","openMenu","_setPosition","hasBackdrop","_getPortal","lazyContent","menuData","_menuClosingActions","_initMenu","_startAnimation","menuOpen","_resetAnimation","_attached","_resetMenu","parentMenu","_setMenuElevation","_setIsMenuOpen","focusFirstItem","setElevation","depth","_highlighted","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","keydownEvents","withLockedPosition","backdropClass","setPositionClasses","posX","connectionPair","posY","xPosition","originFallbackX","_b","yPosition","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","overlapTrigger","backdrop","parentClose","hover","_hovered","_handleMousedown","isFakeMousedownFromScreenReader","asapScheduler","_isAnimating","aria-haspopup","MatMenuItem","_deprecatedMatMenuTriggerFor","_MatMenuDirectivesModule","MatMenuContent","MatMenuModule","minWidth","fadeInContent","SELECT_MULTIPLE_PANEL_PADDING_X","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","_parentFormField","scrollStrategyFactory","_liveAnnouncer","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_optionIds","_transformOrigin","_panelDoneAnimatingStream","_offsetY","_positions","_disableOptionCentering","_focused","controlType","optionSelectionChanges","defer","switchMap","option","onSelectionChange","onStable","o","valueAccessor","_scrollStrategyFactory","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","panelOpen","offsetX","_triggerRect","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","getComputedStyle","fontSize","_calculateOverlayPosition","_highlightCorrectOption","_isRtl","_setSelectionByValue","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","isOpenKey","manager","altKey","previouslySelectedOption","selectedOption","activeItem","A","ctrlKey","hasDeselectedOptions_1","opt","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onAttached","positionChange","_setPseudoCheckboxPaddingSize","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","pseudoCheckbox","querySelector","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","find","error","console","warn","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","withAllowedModifierKeys","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","_getOptionScrollPosition","_getItemHeight","_getOptionIndex","result","current","itemHeight","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","_getAriaLabelledby","_hasFloatingLabel","_labelId","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","first","group","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.id]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","MatListOption","_handleBlur","selectionList","_hasFocus","_setSelected","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-with-avatar]","[attr.aria-selected]","MatSelectionList","_lines","MatLine","_text","checkboxPosition","_markOptionsForCheck","skipPredicate","_setOptionsFromValues","_i","item","disableRippleChanges","colorChanges","firstChange","_isDestroyed","optionIndex","previousFocusIndex","hasModifier","_toggleFocusedOption","_getSelectedOptionValues","values","focusedIndex","focusedOption","hasChanged","_reportValueChange","aria-multiselectable","MAT_SELECTION_LIST_VALUE_ACCESSOR","_MatSelectionListMixinBase","MatListModule","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","_template","_componentFactoryResolver","_appRef","context","_outlet","DomPortalOutlet","insertBefore","outletElement","isAttached","ApplicationRef","MatMenuItemBase","_MatMenuItemMixinBase","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS_FACTORY","_MatMenuBase","_xPosition","_yPosition","_directDescendantItems","QueryList","_tabSubscription","_classList","_panelAnimationState","_overlapTrigger","_hasBackdrop","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","previousPanelClass","_previousPanelClass","className","_updateDirectDescendants","_item","setFocusOrigin","resetActiveItem","newElevation","customElevation","c","startsWith","_previousElevation","_onAnimationDone","_onAnimationStart","_allItems","reset","notifyOnChanges","defaultOptions","_isInteractiveList","navList","list","_getListType","_list","setLines","[class.mat-list-item-avatar]","_avatar","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","hadFocus","newActiveItem","_removeOptionFromList","_handleFocus","_setFocusedOption","accordion","_handleHeaderFocus","expandedHeight","collapsedHeight","MatExpansionPanelHeader","_animationsDisabled","_toggle","_isExpanded","expanded","_getExpandedState","_getPanelId","_getTogglePosition","togglePosition","_showToggle","hideToggle","_keydown","_handleHeaderKeydown","_parentChangeSubscription","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","[attr.aria-controls]","[class.mat-expanded]","[class.mat-expansion-toggle-indicator-after]","[class.mat-expansion-toggle-indicator-before]","[@.disabled]","(@expansionHeight.start)","[@expansionHeight]","MAT_EXPANSION_PANEL_DEFAULT_OPTIONS","MatExpansionPanelDescription","MatExpansionPanelTitle","MatAccordion","_hideToggle","displayMode","_headers","header","MAT_ACCORDION","CdkAccordion","MatExpansionModule","CdkAccordionModule","MatExpansionPanel","MatExpansionPanelActionRow","MatExpansionPanelContent","MAT_GRID_LIST","MatGridTile","_gridList","_rowspan","_colspan","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","columnIndex","rowIndex","lastRowMax","tracker","rowCount","update","numColumns","tiles","fill","tile","_trackTile","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","cssCalcAllowedValue","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","_tileCoordinator","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MAT_ICON_LOCATION","MAT_ICON_LOCATION_FACTORY","funcIriAttributes","attr","funcIriAttributeSelector","funcIriPattern","MatIcon","_iconRegistry","ariaHidden","_location","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIconChanges","svgIcon","_setSvgElement","log","previousValue","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","ngAfterViewChecked","cachedElements","_elementsWithExternalReferences","newPath","_previousPath","_prependPathToReferences","styleTags","querySelectorAll","_cacheChildrenWithExternalReferences","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","elements","attrs","elementsWithFuncIri","elementWithReference","getAttribute","match","attributes","[class.mat-icon-inline]","[class.mat-icon-no-color]","MatListBase","_MatListMixinBase","MatListItemBase","_MatListItemMixinBase","MatCalendar","MatDatepickerIntl","headerComponent","startAt","minDate","maxDate","dateFilter","dateClass","selectedChange","yearSelected","monthSelected","_userSelection","monthView","MatMonthView","yearView","MatYearView","multiYearView","MatMultiYearView","matDatepickerAnimations","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","MatDatepickerContent","_calendar","focusActiveCell","[@transformPanel]","[class.mat-datepicker-content-touch]","_dialog","_dateAdapter","createMissingDateImplError","MatDatepicker","_startAt","_datepickerInput","_getThemePalette","_disabledChange","_inputSubscription","_popupRef","_popupComponentRef","sameDate","_selectedChanged","date","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","afterClosed","_setColor","_createPopup","datepicker","getConnectedOverlayOrigin","componentInstance","MatDialog","DateAdapter","calendarHeaderComponent","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","MatDatepickerInputEvent","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","isAltDownArrow","readOnly","_onInput","parse","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","defaultTabIndex","parsedTabIndex","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","_customIcon","_button","MatDatepickerModule","MatDialogModule","MatCalendarBody","MatCalendarHeader","MatDivider","_inset","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","params","bodyExpansion","uniqueId","_uniqueSelectionDispatcher","afterExpand","afterCollapse","_inputChanges","_headerId","_bodyAnimationDone","_togglePosition","_hasSpacing","_lazyContent","_containsFocus","_body","focusedElement","bodyElement","useValue","[class.mat-expansion-panel-spacing]","accordionHideToggleChange","MatInput","AutofillMonitor","readonly","_MatInputMixinBase","MatInputModule","MatTextareaAutosize","TextFieldModule","calendarLabel","openCalendarLabel","prevMonthLabel","nextMonthLabel","prevYearLabel","nextYearLabel","prevMultiYearLabel","nextMultiYearLabel","switchToMonthViewLabel","switchToMultiYearViewLabel","MatCalendarCell","displayValue","cssClasses","numCols","activeCell","cellAspectRatio","selectedValueChange","_cellClicked","cell","columnChanges","rows","_firstRowOffset","_cellPadding","_cellWidth","_isActiveCell","cellNumber","_focusActiveCell","aria-readonly","todayValue","selectedValue","labelMinRequiredCells","activeDateChange","_activeDate","today","oldActiveDate","validDate","clampDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","getFirstDayOfWeek","_initWeekdays","_createWeekCells","_matCalendarBody","firstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","concat","daysInMonth","dateNames","getDateNames","_weeks","_shouldEnableDate","dateA11yLabel","cellClasses","d1","d2","yearsPerPage","isSameMultiYearView","_selectedYear","_todayYear","activeYear","minYearOfPage","getActiveOffset","_years","year","_createCellForYear","_yearSelected","month","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","multi-year","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","view","_getCurrentViewComponent","correspondingChip","MatChipList","chips","chip","selectViaInteraction","_clearSelection","skip","MatChipListChange","_blur","_hasFocusedChip","_chipInput","focused","_markAsTouched","_allowFocusEscape","_userTabIndex","_resetChips","_dropSubscriptions","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","chipSelectionChanges","chipFocusChanges","chipIndex","chipBlurChanges","chipRemoveChanges","_lastDestroyedChipIndex","_originatesFromChip","currentElement","parentElement","_syncChipsState","_chipListMultiple","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","ariaOrientation","selectable","MatChip","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","TAB","_emitChipEnd","addOnBlur","_focus","_isSeparatorKey","separators","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","ɵ0","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","ariaLabelledBy","closeOnNavigation","animationBody","matDialogAnimations","dialogContainer","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_startExitAnimation","aria-modal","[@dialogContainer]","(@dialogContainer.start)","(@dialogContainer.done)","MatDialogRef","_containerInstance","_afterClosed","_beforeClosed","phaseName","_closeFallbackTimeout","_result","dialogResult","detachBackdrop","totalTime","beforeClosed","_getPositionStrategy","centerVertically","updateSize","addPanelClass","removePanelClass","afterOpen","beforeClose","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","_closeDialogs","dialog","dialogConfig","maxHeight","disposeOnNavigation","injectionTokens","splice","overlayContainer","getContainerElement","siblings","sibling","hasAttribute","dialogs","Location","OverlayContainer","dialogElementUid","MatDialogClose","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","minRows","maxRows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","inputValueAccessor","_autofillMonitor","_isServer","_isNativeSelect","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","selectElement","firstOption","[class.mat-input-server]","[required]","[attr.readonly]","MatCard","MatCardHeader","MatCardTitleGroup","MatCardModule","MatCardContent","MatCardTitle","MatCardSubtitle","MatCardActions","MatCardFooter","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardImage","MatCardXlImage","MatCardAvatar","MAT_CHECKBOX_CLICK_ACTION","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MatCheckbox","Init","Checked","Unchecked","Indeterminate","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","TransitionCheckState","_indeterminate","changed","_transitionCheckState","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","_onInteractionEvent","animSuffix","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","ripple","MatRipple","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","_MatCheckboxRequiredValidatorModule","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","coercedValue","_dispatchSelectionChange","tagName","_removeTriggerEvents","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","parentChip","MatChipListBase","_MatChipListMixinBase","_updateTabIndex","_updateFocusForDestroyedChips","inputElement","_focusInput","_isInputEmpty","newChipIndex","isRoundButton","DEFAULT_ROUND_BUTTON_COLOR","MatButton","_origin","_hasHostAttributes","attribute","MatAnchor","focusMonitor","stopImmediatePropagation","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","appearance","_buttonToggles","_syncButtonToggle","deferEvents","_updateModelValue","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","[class.mat-button-toggle-group-appearance-standard]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","_appearance","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","[class.mat-button-toggle-appearance-standard]","[attr.name]","MatButtonToggleModule","align","[class.mat-card-actions-align-end]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","MAT_LABEL_GLOBAL_OPTIONS","MAT_FORM_FIELD_DEFAULT_OPTIONS","hideRequiredMarker","hintLabel","floatLabel","underlineRef","_connectionContainerRef","_inputContainerRef","_controlStatic","_labelChildNonStatic","MatLabel","_labelChildStatic","_placeholderChild","MatPlaceholder","_errorChildren","MatError","_hintChildren","MatHint","_prefixChildren","MatPrefix","_suffixChildren","MatSuffix","_MatFormFieldMixinBase","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","MatAutocomplete","showPanel","_isOpen","optionSelected","_autoActiveFirstOption","autoActiveFirstOption","_setVisibilityClasses","_setVisibility","_setScrollTop","_getScrollTop","_emitSelectEvent","panelWidth","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","_positionStrategy","_setStrategyPositions","_destroyPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_getOutsideClickStream","MatOptionSelectionChange","clickTarget","formField","_setTriggerValue","activeOption","_resetActiveItem","prevActiveItem","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","_animateAndLockLabel","newScrollPosition","_subscribeToClosingActions","firstStable","optionChanges","reapplyLastPosition","wasOpen","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","setOrigin","_getConnectedElement","_getPanelWidth","withPush","belowPosition","abovePosition","connectedTo","_getHostWidth","[attr.autocomplete]","[attr.aria-autocomplete]","[attr.aria-haspopup]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadgeBase","_MatBadgeMixinBase","MatBadge","_renderer","_hasContent","_overlap","val","_description","newDescription","badgeElement","_badgeElement","_updateHostAriaDescription","_hidden","isAbove","isAfter","contentChange","_updateTextContent","description","destroyNode","getBadgeElement","_createBadgeElement","_clearExistingBadges","oldDescription","colorPalette","currentChild","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","[class.mat-badge-disabled]","Renderer2","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","COMPLEX","ACCELERATION_CURVE","EXITING","DECELERATION_CURVE","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MAT_BOTTOM_SHEET_DEFAULT_OPTIONS","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isIconButton","BUTTON_HOST_ATTRIBUTES_1","_parent","_active","_mostRecentViewValue","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","_getAriaSelected","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatFormFieldBase","labelOptions","_defaults","_outlineGapCalculationNeededImmediately","_outlineGapCalculationNeededOnStable","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","float","_animationsEnabled","_hideRequiredMarker","_processHints","_explicitFormFieldControl","_controlNonStatic","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","labelEl","startWidth","gapWidth","startEls","gapEls","containerRect","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-has-label]","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","lines","setClass","isAdd","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","optionHeight","currentScrollPosition","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","provider","year1","dateAdapter","year2","startingYear","getStartingYear","exp","parentRegistry","httpClient","sanitizer","pathname","search","scrollThrottle","parentIntl","createShadowRoot","attachShadow","rootNode","getRootNode","sortOrder","SUPPORTS_INTL_API","setPrototypeOf","__proto__","__assign","assign","s","n","VERSION","Version","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hammerLoader","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_checkCdkVersionMatch","_isTestEnv","__karma__","jasmine","doctype","body","testElement","computedStyle","full","CDK_VERSION","_checkHammerIsAvailable","BidiModule","Boolean","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","Intl","DEFAULT_MONTH_NAMES","short","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","getTime","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","isNaN","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES","ɵ1","noopHammerInstance","on","off","_hammerOptions","commonModule","events","buildHammer","hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLineSetter","FADING_IN","VISIBLE","FADING_OUT","HIDDEN","RippleRef","RippleState","fadeOut","fadeOutRipple","defaultRippleAnimationConfig","ignoreMouseEventsTimeout","passiveEventOptions","_target","_isPointerDown","_triggerEvents","_activeRipples","isFakeMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","_onTouchStart","touches","changedTouches","_onPointerUp","terminateOnPointerUp","persistent","_containerElement","_containerRect","animationConfig","centered","radius","transitionDuration","rippleRef","_mostRecentTransientRipple","_runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","fadeOutAll","_triggerElement","globalOptions","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","launch","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]"],"mappings":"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"}